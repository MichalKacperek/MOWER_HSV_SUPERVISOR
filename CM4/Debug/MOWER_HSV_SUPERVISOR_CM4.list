
MOWER_HSV_SUPERVISOR_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002164  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081023fc  081023fc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810240c  0810240c  0001240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08102410  08102410  00012410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  10000000  08102414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000078  10000044  08102458  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100000bc  08102458  000200bc  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e88e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001ef2  00000000  00000000  0002e902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000cd8  00000000  00000000  000307f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bf0  00000000  00000000  000314d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039c1a  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ef38  00000000  00000000  0006bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00183a6b  00000000  00000000  0007ac12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001fe67d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000034b4  00000000  00000000  001fe6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000044 	.word	0x10000044
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081023e4 	.word	0x081023e4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000048 	.word	0x10000048
 81002d4:	081023e4 	.word	0x081023e4

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b088      	sub	sp, #32
 8100314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100316:	f107 030c 	add.w	r3, r7, #12
 810031a:	2200      	movs	r2, #0
 810031c:	601a      	str	r2, [r3, #0]
 810031e:	605a      	str	r2, [r3, #4]
 8100320:	609a      	str	r2, [r3, #8]
 8100322:	60da      	str	r2, [r3, #12]
 8100324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100326:	4b35      	ldr	r3, [pc, #212]	; (81003fc <MX_GPIO_Init+0xec>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810032c:	4a33      	ldr	r2, [pc, #204]	; (81003fc <MX_GPIO_Init+0xec>)
 810032e:	f043 0320 	orr.w	r3, r3, #32
 8100332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100336:	4b31      	ldr	r3, [pc, #196]	; (81003fc <MX_GPIO_Init+0xec>)
 8100338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810033c:	f003 0320 	and.w	r3, r3, #32
 8100340:	60bb      	str	r3, [r7, #8]
 8100342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100344:	4b2d      	ldr	r3, [pc, #180]	; (81003fc <MX_GPIO_Init+0xec>)
 8100346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810034a:	4a2c      	ldr	r2, [pc, #176]	; (81003fc <MX_GPIO_Init+0xec>)
 810034c:	f043 0310 	orr.w	r3, r3, #16
 8100350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100354:	4b29      	ldr	r3, [pc, #164]	; (81003fc <MX_GPIO_Init+0xec>)
 8100356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810035a:	f003 0310 	and.w	r3, r3, #16
 810035e:	607b      	str	r3, [r7, #4]
 8100360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100362:	4b26      	ldr	r3, [pc, #152]	; (81003fc <MX_GPIO_Init+0xec>)
 8100364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100368:	4a24      	ldr	r2, [pc, #144]	; (81003fc <MX_GPIO_Init+0xec>)
 810036a:	f043 0302 	orr.w	r3, r3, #2
 810036e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100372:	4b22      	ldr	r3, [pc, #136]	; (81003fc <MX_GPIO_Init+0xec>)
 8100374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100378:	f003 0302 	and.w	r3, r3, #2
 810037c:	603b      	str	r3, [r7, #0]
 810037e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Ignition_relay_Pin|Fuel_valve_Pin, GPIO_PIN_RESET);
 8100380:	2200      	movs	r2, #0
 8100382:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8100386:	481e      	ldr	r0, [pc, #120]	; (8100400 <MX_GPIO_Init+0xf0>)
 8100388:	f000 ffa2 	bl	81012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Main_switch_Pin|Starter_relay_Pin|LD3_Pin, GPIO_PIN_RESET);
 810038c:	2200      	movs	r2, #0
 810038e:	f44f 41b0 	mov.w	r1, #22528	; 0x5800
 8100392:	481c      	ldr	r0, [pc, #112]	; (8100404 <MX_GPIO_Init+0xf4>)
 8100394:	f000 ff9c 	bl	81012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Ignition_relay_Pin|Fuel_valve_Pin;
 8100398:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 810039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810039e:	2301      	movs	r3, #1
 81003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81003a2:	2302      	movs	r3, #2
 81003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003a6:	2300      	movs	r3, #0
 81003a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81003aa:	f107 030c 	add.w	r3, r7, #12
 81003ae:	4619      	mov	r1, r3
 81003b0:	4813      	ldr	r0, [pc, #76]	; (8100400 <MX_GPIO_Init+0xf0>)
 81003b2:	f000 fddd 	bl	8100f70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Main_switch_Pin|Starter_relay_Pin;
 81003b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 81003ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003bc:	2301      	movs	r3, #1
 81003be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81003c0:	2302      	movs	r3, #2
 81003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003c4:	2300      	movs	r3, #0
 81003c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81003c8:	f107 030c 	add.w	r3, r7, #12
 81003cc:	4619      	mov	r1, r3
 81003ce:	480d      	ldr	r0, [pc, #52]	; (8100404 <MX_GPIO_Init+0xf4>)
 81003d0:	f000 fdce 	bl	8100f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 81003d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81003d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003da:	2301      	movs	r3, #1
 81003dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003de:	2300      	movs	r3, #0
 81003e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003e2:	2300      	movs	r3, #0
 81003e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 81003e6:	f107 030c 	add.w	r3, r7, #12
 81003ea:	4619      	mov	r1, r3
 81003ec:	4805      	ldr	r0, [pc, #20]	; (8100404 <MX_GPIO_Init+0xf4>)
 81003ee:	f000 fdbf 	bl	8100f70 <HAL_GPIO_Init>

}
 81003f2:	bf00      	nop
 81003f4:	3720      	adds	r7, #32
 81003f6:	46bd      	mov	sp, r7
 81003f8:	bd80      	pop	{r7, pc}
 81003fa:	bf00      	nop
 81003fc:	58024400 	.word	0x58024400
 8100400:	58021000 	.word	0x58021000
 8100404:	58020400 	.word	0x58020400

08100408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100408:	b580      	push	{r7, lr}
 810040a:	b084      	sub	sp, #16
 810040c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810040e:	4b9b      	ldr	r3, [pc, #620]	; (810067c <main+0x274>)
 8100410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100414:	4a99      	ldr	r2, [pc, #612]	; (810067c <main+0x274>)
 8100416:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810041a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810041e:	4b97      	ldr	r3, [pc, #604]	; (810067c <main+0x274>)
 8100420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100428:	60bb      	str	r3, [r7, #8]
 810042a:	68bb      	ldr	r3, [r7, #8]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810042c:	2001      	movs	r0, #1
 810042e:	f000 ffa1 	bl	8101374 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100432:	f001 f845 	bl	81014c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100436:	2201      	movs	r2, #1
 8100438:	2102      	movs	r1, #2
 810043a:	2000      	movs	r0, #0
 810043c:	f000 ffc6 	bl	81013cc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100440:	4b8f      	ldr	r3, [pc, #572]	; (8100680 <main+0x278>)
 8100442:	681b      	ldr	r3, [r3, #0]
 8100444:	091b      	lsrs	r3, r3, #4
 8100446:	f003 030f 	and.w	r3, r3, #15
 810044a:	2b07      	cmp	r3, #7
 810044c:	d108      	bne.n	8100460 <main+0x58>
 810044e:	4b8d      	ldr	r3, [pc, #564]	; (8100684 <main+0x27c>)
 8100450:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100454:	4a8b      	ldr	r2, [pc, #556]	; (8100684 <main+0x27c>)
 8100456:	f043 0301 	orr.w	r3, r3, #1
 810045a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810045e:	e007      	b.n	8100470 <main+0x68>
 8100460:	4b88      	ldr	r3, [pc, #544]	; (8100684 <main+0x27c>)
 8100462:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100466:	4a87      	ldr	r2, [pc, #540]	; (8100684 <main+0x27c>)
 8100468:	f043 0301 	orr.w	r3, r3, #1
 810046c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100470:	f000 fba6 	bl	8100bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8100474:	4b81      	ldr	r3, [pc, #516]	; (810067c <main+0x274>)
 8100476:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 810047a:	4a80      	ldr	r2, [pc, #512]	; (810067c <main+0x274>)
 810047c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100480:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8100484:	4b7d      	ldr	r3, [pc, #500]	; (810067c <main+0x274>)
 8100486:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 810048a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 810048e:	607b      	str	r3, [r7, #4]
 8100490:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100492:	f7ff ff3d 	bl	8100310 <MX_GPIO_Init>
  MX_TIM13_Init();
 8100496:	f000 facf 	bl	8100a38 <MX_TIM13_Init>
  //HAL_GPIO_WritePin(Fuel_valve_GPIO_Port, Fuel_valve_Pin, GPIO_PIN_RESET);
 // HAL_GPIO_WritePin(Starter_relay_GPIO_Port, Starter_relay_Pin, GPIO_PIN_RESET);



  HAL_TIM_Base_Start_IT(&htim13);
 810049a:	487b      	ldr	r0, [pc, #492]	; (8100688 <main+0x280>)
 810049c:	f001 f9f0 	bl	8101880 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim13, TIM_CHANNEL_1);
 81004a0:	2100      	movs	r1, #0
 81004a2:	4879      	ldr	r0, [pc, #484]	; (8100688 <main+0x280>)
 81004a4:	f001 fa84 	bl	81019b0 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim13,TIM_IT_CC1);
 81004a8:	4b77      	ldr	r3, [pc, #476]	; (8100688 <main+0x280>)
 81004aa:	681b      	ldr	r3, [r3, #0]
 81004ac:	68da      	ldr	r2, [r3, #12]
 81004ae:	4b76      	ldr	r3, [pc, #472]	; (8100688 <main+0x280>)
 81004b0:	681b      	ldr	r3, [r3, #0]
 81004b2:	f042 0202 	orr.w	r2, r2, #2
 81004b6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(&htim13,TIM_IT_UPDATE);
 81004b8:	4b73      	ldr	r3, [pc, #460]	; (8100688 <main+0x280>)
 81004ba:	681b      	ldr	r3, [r3, #0]
 81004bc:	68da      	ldr	r2, [r3, #12]
 81004be:	4b72      	ldr	r3, [pc, #456]	; (8100688 <main+0x280>)
 81004c0:	681b      	ldr	r3, [r3, #0]
 81004c2:	f042 0201 	orr.w	r2, r2, #1
 81004c6:	60da      	str	r2, [r3, #12]
  src = (char *) SRAM3_Dest_Addr;
 81004c8:	4b70      	ldr	r3, [pc, #448]	; (810068c <main+0x284>)
 81004ca:	4a71      	ldr	r2, [pc, #452]	; (8100690 <main+0x288>)
 81004cc:	601a      	str	r2, [r3, #0]
  char* dest = (char *) (SRAM3_Dest_Addr+4);
 81004ce:	4b71      	ldr	r3, [pc, #452]	; (8100694 <main+0x28c>)
 81004d0:	60fb      	str	r3, [r7, #12]
  engine_struct_size = 6; //sizeof(engine);
 81004d2:	4b71      	ldr	r3, [pc, #452]	; (8100698 <main+0x290>)
 81004d4:	2206      	movs	r2, #6
 81004d6:	601a      	str	r2, [r3, #0]

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(1));
 81004d8:	2002      	movs	r0, #2
 81004da:	f000 ff4b 	bl	8101374 <HAL_HSEM_ActivateNotification>

  engine.pins.ignition.GPIO_Port = Ignition_relay_GPIO_Port;
 81004de:	4b6f      	ldr	r3, [pc, #444]	; (810069c <main+0x294>)
 81004e0:	4a6f      	ldr	r2, [pc, #444]	; (81006a0 <main+0x298>)
 81004e2:	611a      	str	r2, [r3, #16]
  engine.pins.ignition.Pin = Ignition_relay_Pin;
 81004e4:	4b6d      	ldr	r3, [pc, #436]	; (810069c <main+0x294>)
 81004e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 81004ea:	829a      	strh	r2, [r3, #20]
  engine.pins.fuel_valve.GPIO_Port = Fuel_valve_GPIO_Port;
 81004ec:	4b6b      	ldr	r3, [pc, #428]	; (810069c <main+0x294>)
 81004ee:	4a6c      	ldr	r2, [pc, #432]	; (81006a0 <main+0x298>)
 81004f0:	619a      	str	r2, [r3, #24]
  engine.pins.fuel_valve.Pin = Fuel_valve_Pin;
 81004f2:	4b6a      	ldr	r3, [pc, #424]	; (810069c <main+0x294>)
 81004f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 81004f8:	839a      	strh	r2, [r3, #28]
  engine.pins.starter.GPIO_Port = Starter_relay_GPIO_Port;
 81004fa:	4b68      	ldr	r3, [pc, #416]	; (810069c <main+0x294>)
 81004fc:	4a69      	ldr	r2, [pc, #420]	; (81006a4 <main+0x29c>)
 81004fe:	621a      	str	r2, [r3, #32]
  engine.pins.starter.Pin = Starter_relay_Pin;
 8100500:	4b66      	ldr	r3, [pc, #408]	; (810069c <main+0x294>)
 8100502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8100506:	849a      	strh	r2, [r3, #36]	; 0x24
  engine.state = ENGINE_INIT_STATE;
 8100508:	4b64      	ldr	r3, [pc, #400]	; (810069c <main+0x294>)
 810050a:	2201      	movs	r2, #1
 810050c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  engine.starter_timeout = 2000;
 8100510:	4b62      	ldr	r3, [pc, #392]	; (810069c <main+0x294>)
 8100512:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8100516:	851a      	strh	r2, [r3, #40]	; 0x28
  engine.rpm_range.rpm_minimal = 200;
 8100518:	4b60      	ldr	r3, [pc, #384]	; (810069c <main+0x294>)
 810051a:	22c8      	movs	r2, #200	; 0xc8
 810051c:	819a      	strh	r2, [r3, #12]
  engine.rpm_range.rpm_maximal = 2700;
 810051e:	4b5f      	ldr	r3, [pc, #380]	; (810069c <main+0x294>)
 8100520:	f640 228c 	movw	r2, #2700	; 0xa8c
 8100524:	81da      	strh	r2, [r3, #14]
  engine.rpm_range.rpm_overrange = 2650;
 8100526:	4b5d      	ldr	r3, [pc, #372]	; (810069c <main+0x294>)
 8100528:	f640 225a 	movw	r2, #2650	; 0xa5a
 810052c:	80da      	strh	r2, [r3, #6]
  engine.rpm_range.rpm_underrange = 2200;
 810052e:	4b5b      	ldr	r3, [pc, #364]	; (810069c <main+0x294>)
 8100530:	f640 0298 	movw	r2, #2200	; 0x898
 8100534:	811a      	strh	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  volatile uint32_t time = HAL_GetTick();
 8100536:	f000 fbeb 	bl	8100d10 <HAL_GetTick>
 810053a:	4603      	mov	r3, r0
 810053c:	603b      	str	r3, [r7, #0]
	  switch(engine.state)
 810053e:	4b57      	ldr	r3, [pc, #348]	; (810069c <main+0x294>)
 8100540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8100544:	3b01      	subs	r3, #1
 8100546:	2b04      	cmp	r3, #4
 8100548:	f200 81a0 	bhi.w	810088c <main+0x484>
 810054c:	a201      	add	r2, pc, #4	; (adr r2, 8100554 <main+0x14c>)
 810054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100552:	bf00      	nop
 8100554:	08100569 	.word	0x08100569
 8100558:	081005cd 	.word	0x081005cd
 810055c:	08100781 	.word	0x08100781
 8100560:	0810081f 	.word	0x0810081f
 8100564:	08100867 	.word	0x08100867
	  {
		  case ENGINE_INIT_STATE:

			  engine.starter_retries = 1;
 8100568:	4b4c      	ldr	r3, [pc, #304]	; (810069c <main+0x294>)
 810056a:	2201      	movs	r2, #1
 810056c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			  engine.starter_started_at = 0;
 8100570:	4b4a      	ldr	r3, [pc, #296]	; (810069c <main+0x294>)
 8100572:	2200      	movs	r2, #0
 8100574:	62da      	str	r2, [r3, #44]	; 0x2c
			  if (engine.set_state.set_state_bits.engine_running_enabled == 1)
 8100576:	4b49      	ldr	r3, [pc, #292]	; (810069c <main+0x294>)
 8100578:	785b      	ldrb	r3, [r3, #1]
 810057a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 810057e:	b2db      	uxtb	r3, r3
 8100580:	2b01      	cmp	r3, #1
 8100582:	d116      	bne.n	81005b2 <main+0x1aa>
			  {
				  if (engine.rpm > engine.rpm_range.rpm_minimal)
 8100584:	4b45      	ldr	r3, [pc, #276]	; (810069c <main+0x294>)
 8100586:	885b      	ldrh	r3, [r3, #2]
 8100588:	b29a      	uxth	r2, r3
 810058a:	4b44      	ldr	r3, [pc, #272]	; (810069c <main+0x294>)
 810058c:	899b      	ldrh	r3, [r3, #12]
 810058e:	429a      	cmp	r2, r3
 8100590:	d904      	bls.n	810059c <main+0x194>
				  {
					  engine.state = ENGINE_RUNNING_STATE;
 8100592:	4b42      	ldr	r3, [pc, #264]	; (810069c <main+0x294>)
 8100594:	2203      	movs	r2, #3
 8100596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  }
			  else if (!engine.set_state.set_state_bits.engine_running_enabled)
			  {
				  engine.state = ENGINE_STOP_STATE;
			  }
			  break;
 810059a:	e170      	b.n	810087e <main+0x476>
				  else if (engine.rpm == 0)
 810059c:	4b3f      	ldr	r3, [pc, #252]	; (810069c <main+0x294>)
 810059e:	885b      	ldrh	r3, [r3, #2]
 81005a0:	b29b      	uxth	r3, r3
 81005a2:	2b00      	cmp	r3, #0
 81005a4:	f040 816b 	bne.w	810087e <main+0x476>
					  engine.state = ENGINE_START_STATE;
 81005a8:	4b3c      	ldr	r3, [pc, #240]	; (810069c <main+0x294>)
 81005aa:	2202      	movs	r2, #2
 81005ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  break;
 81005b0:	e165      	b.n	810087e <main+0x476>
			  else if (!engine.set_state.set_state_bits.engine_running_enabled)
 81005b2:	4b3a      	ldr	r3, [pc, #232]	; (810069c <main+0x294>)
 81005b4:	785b      	ldrb	r3, [r3, #1]
 81005b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81005ba:	b2db      	uxtb	r3, r3
 81005bc:	2b00      	cmp	r3, #0
 81005be:	f040 815e 	bne.w	810087e <main+0x476>
				  engine.state = ENGINE_STOP_STATE;
 81005c2:	4b36      	ldr	r3, [pc, #216]	; (810069c <main+0x294>)
 81005c4:	2204      	movs	r2, #4
 81005c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  break;
 81005ca:	e158      	b.n	810087e <main+0x476>

		  case ENGINE_START_STATE:

			  if (engine.starter_retries > 0)
 81005cc:	4b33      	ldr	r3, [pc, #204]	; (810069c <main+0x294>)
 81005ce:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 81005d2:	2b00      	cmp	r3, #0
 81005d4:	f000 808e 	beq.w	81006f4 <main+0x2ec>
			  {
				  if (engine.set_state.set_state_bits.engine_running_enabled & (engine.starter_started_at == 0))
 81005d8:	4b30      	ldr	r3, [pc, #192]	; (810069c <main+0x294>)
 81005da:	785b      	ldrb	r3, [r3, #1]
 81005dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81005e0:	b2db      	uxtb	r3, r3
 81005e2:	461a      	mov	r2, r3
 81005e4:	4b2d      	ldr	r3, [pc, #180]	; (810069c <main+0x294>)
 81005e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81005e8:	2b00      	cmp	r3, #0
 81005ea:	bf0c      	ite	eq
 81005ec:	2301      	moveq	r3, #1
 81005ee:	2300      	movne	r3, #0
 81005f0:	b2db      	uxtb	r3, r3
 81005f2:	4013      	ands	r3, r2
 81005f4:	2b00      	cmp	r3, #0
 81005f6:	d01c      	beq.n	8100632 <main+0x22a>
				  {
					  __TURN_ON_IGNITION(engine);
 81005f8:	4b28      	ldr	r3, [pc, #160]	; (810069c <main+0x294>)
 81005fa:	691b      	ldr	r3, [r3, #16]
 81005fc:	4a27      	ldr	r2, [pc, #156]	; (810069c <main+0x294>)
 81005fe:	8a91      	ldrh	r1, [r2, #20]
 8100600:	2201      	movs	r2, #1
 8100602:	4618      	mov	r0, r3
 8100604:	f000 fe64 	bl	81012d0 <HAL_GPIO_WritePin>
 8100608:	4b24      	ldr	r3, [pc, #144]	; (810069c <main+0x294>)
 810060a:	699b      	ldr	r3, [r3, #24]
 810060c:	4a23      	ldr	r2, [pc, #140]	; (810069c <main+0x294>)
 810060e:	8b91      	ldrh	r1, [r2, #28]
 8100610:	2201      	movs	r2, #1
 8100612:	4618      	mov	r0, r3
 8100614:	f000 fe5c 	bl	81012d0 <HAL_GPIO_WritePin>
					  engine.starter_started_at = HAL_GetTick();
 8100618:	f000 fb7a 	bl	8100d10 <HAL_GetTick>
 810061c:	4603      	mov	r3, r0
 810061e:	4a1f      	ldr	r2, [pc, #124]	; (810069c <main+0x294>)
 8100620:	62d3      	str	r3, [r2, #44]	; 0x2c
					  __TURN_ON_STARTER(engine);
 8100622:	4b1e      	ldr	r3, [pc, #120]	; (810069c <main+0x294>)
 8100624:	6a1b      	ldr	r3, [r3, #32]
 8100626:	4a1d      	ldr	r2, [pc, #116]	; (810069c <main+0x294>)
 8100628:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 810062a:	2201      	movs	r2, #1
 810062c:	4618      	mov	r0, r3
 810062e:	f000 fe4f 	bl	81012d0 <HAL_GPIO_WritePin>
				  }
				  if ((engine.starter_started_at + engine.starter_timeout) < time)
 8100632:	4b1a      	ldr	r3, [pc, #104]	; (810069c <main+0x294>)
 8100634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100636:	4a19      	ldr	r2, [pc, #100]	; (810069c <main+0x294>)
 8100638:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 810063a:	441a      	add	r2, r3
 810063c:	683b      	ldr	r3, [r7, #0]
 810063e:	429a      	cmp	r2, r3
 8100640:	d232      	bcs.n	81006a8 <main+0x2a0>
				  {
					  __TURN_OFF_STARTER(engine);
 8100642:	4b16      	ldr	r3, [pc, #88]	; (810069c <main+0x294>)
 8100644:	6a1b      	ldr	r3, [r3, #32]
 8100646:	4a15      	ldr	r2, [pc, #84]	; (810069c <main+0x294>)
 8100648:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 810064a:	2200      	movs	r2, #0
 810064c:	4618      	mov	r0, r3
 810064e:	f000 fe3f 	bl	81012d0 <HAL_GPIO_WritePin>
					  if ((engine.starter_started_at + 2* engine.starter_timeout) < time)
 8100652:	4b12      	ldr	r3, [pc, #72]	; (810069c <main+0x294>)
 8100654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100656:	4a11      	ldr	r2, [pc, #68]	; (810069c <main+0x294>)
 8100658:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 810065a:	0052      	lsls	r2, r2, #1
 810065c:	441a      	add	r2, r3
 810065e:	683b      	ldr	r3, [r7, #0]
 8100660:	429a      	cmp	r2, r3
 8100662:	d268      	bcs.n	8100736 <main+0x32e>
					  {
						  engine.starter_retries--;
 8100664:	4b0d      	ldr	r3, [pc, #52]	; (810069c <main+0x294>)
 8100666:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 810066a:	3b01      	subs	r3, #1
 810066c:	b2da      	uxtb	r2, r3
 810066e:	4b0b      	ldr	r3, [pc, #44]	; (810069c <main+0x294>)
 8100670:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
						  engine.starter_started_at = 0;
 8100674:	4b09      	ldr	r3, [pc, #36]	; (810069c <main+0x294>)
 8100676:	2200      	movs	r2, #0
 8100678:	62da      	str	r2, [r3, #44]	; 0x2c
 810067a:	e05c      	b.n	8100736 <main+0x32e>
 810067c:	58024400 	.word	0x58024400
 8100680:	e000ed00 	.word	0xe000ed00
 8100684:	58026400 	.word	0x58026400
 8100688:	1000006c 	.word	0x1000006c
 810068c:	10000060 	.word	0x10000060
 8100690:	30040000 	.word	0x30040000
 8100694:	30040004 	.word	0x30040004
 8100698:	10000064 	.word	0x10000064
 810069c:	10000008 	.word	0x10000008
 81006a0:	58021000 	.word	0x58021000
 81006a4:	58020400 	.word	0x58020400
					  }
				  }
				  else if (((engine.starter_started_at + engine.starter_timeout) > time) & (engine.rpm >  engine.rpm_range.rpm_minimal))
 81006a8:	4b89      	ldr	r3, [pc, #548]	; (81008d0 <main+0x4c8>)
 81006aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81006ac:	4a88      	ldr	r2, [pc, #544]	; (81008d0 <main+0x4c8>)
 81006ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 81006b0:	441a      	add	r2, r3
 81006b2:	683b      	ldr	r3, [r7, #0]
 81006b4:	429a      	cmp	r2, r3
 81006b6:	bf8c      	ite	hi
 81006b8:	2301      	movhi	r3, #1
 81006ba:	2300      	movls	r3, #0
 81006bc:	b2da      	uxtb	r2, r3
 81006be:	4b84      	ldr	r3, [pc, #528]	; (81008d0 <main+0x4c8>)
 81006c0:	885b      	ldrh	r3, [r3, #2]
 81006c2:	b299      	uxth	r1, r3
 81006c4:	4b82      	ldr	r3, [pc, #520]	; (81008d0 <main+0x4c8>)
 81006c6:	899b      	ldrh	r3, [r3, #12]
 81006c8:	4299      	cmp	r1, r3
 81006ca:	bf8c      	ite	hi
 81006cc:	2301      	movhi	r3, #1
 81006ce:	2300      	movls	r3, #0
 81006d0:	b2db      	uxtb	r3, r3
 81006d2:	4013      	ands	r3, r2
 81006d4:	b2db      	uxtb	r3, r3
 81006d6:	2b00      	cmp	r3, #0
 81006d8:	d02d      	beq.n	8100736 <main+0x32e>
				  {
					  __TURN_OFF_STARTER(engine);
 81006da:	4b7d      	ldr	r3, [pc, #500]	; (81008d0 <main+0x4c8>)
 81006dc:	6a1b      	ldr	r3, [r3, #32]
 81006de:	4a7c      	ldr	r2, [pc, #496]	; (81008d0 <main+0x4c8>)
 81006e0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 81006e2:	2200      	movs	r2, #0
 81006e4:	4618      	mov	r0, r3
 81006e6:	f000 fdf3 	bl	81012d0 <HAL_GPIO_WritePin>
					  engine.state = ENGINE_RUNNING_STATE;
 81006ea:	4b79      	ldr	r3, [pc, #484]	; (81008d0 <main+0x4c8>)
 81006ec:	2203      	movs	r2, #3
 81006ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 81006f2:	e020      	b.n	8100736 <main+0x32e>
				  }
			  }
			  else if (engine.starter_retries == 0)
 81006f4:	4b76      	ldr	r3, [pc, #472]	; (81008d0 <main+0x4c8>)
 81006f6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 81006fa:	2b00      	cmp	r3, #0
 81006fc:	d11b      	bne.n	8100736 <main+0x32e>
			  {
				  __TURN_OFF_STARTER(engine);
 81006fe:	4b74      	ldr	r3, [pc, #464]	; (81008d0 <main+0x4c8>)
 8100700:	6a1b      	ldr	r3, [r3, #32]
 8100702:	4a73      	ldr	r2, [pc, #460]	; (81008d0 <main+0x4c8>)
 8100704:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8100706:	2200      	movs	r2, #0
 8100708:	4618      	mov	r0, r3
 810070a:	f000 fde1 	bl	81012d0 <HAL_GPIO_WritePin>
				  __STOP_ENGINE(engine);
 810070e:	4b70      	ldr	r3, [pc, #448]	; (81008d0 <main+0x4c8>)
 8100710:	691b      	ldr	r3, [r3, #16]
 8100712:	4a6f      	ldr	r2, [pc, #444]	; (81008d0 <main+0x4c8>)
 8100714:	8a91      	ldrh	r1, [r2, #20]
 8100716:	2200      	movs	r2, #0
 8100718:	4618      	mov	r0, r3
 810071a:	f000 fdd9 	bl	81012d0 <HAL_GPIO_WritePin>
 810071e:	4b6c      	ldr	r3, [pc, #432]	; (81008d0 <main+0x4c8>)
 8100720:	699b      	ldr	r3, [r3, #24]
 8100722:	4a6b      	ldr	r2, [pc, #428]	; (81008d0 <main+0x4c8>)
 8100724:	8b91      	ldrh	r1, [r2, #28]
 8100726:	2200      	movs	r2, #0
 8100728:	4618      	mov	r0, r3
 810072a:	f000 fdd1 	bl	81012d0 <HAL_GPIO_WritePin>
				  /* send: not able to run engine */
				  engine.state = ENGINE_ERROR_STATE;
 810072e:	4b68      	ldr	r3, [pc, #416]	; (81008d0 <main+0x4c8>)
 8100730:	2205      	movs	r2, #5
 8100732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  }
			  if (engine.set_state.set_state_bits.engine_running_enabled == 0)
 8100736:	4b66      	ldr	r3, [pc, #408]	; (81008d0 <main+0x4c8>)
 8100738:	785b      	ldrb	r3, [r3, #1]
 810073a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 810073e:	b2db      	uxtb	r3, r3
 8100740:	2b00      	cmp	r3, #0
 8100742:	f040 809e 	bne.w	8100882 <main+0x47a>
			  {
				  __TURN_OFF_STARTER(engine);
 8100746:	4b62      	ldr	r3, [pc, #392]	; (81008d0 <main+0x4c8>)
 8100748:	6a1b      	ldr	r3, [r3, #32]
 810074a:	4a61      	ldr	r2, [pc, #388]	; (81008d0 <main+0x4c8>)
 810074c:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 810074e:	2200      	movs	r2, #0
 8100750:	4618      	mov	r0, r3
 8100752:	f000 fdbd 	bl	81012d0 <HAL_GPIO_WritePin>
				  __STOP_ENGINE(engine);
 8100756:	4b5e      	ldr	r3, [pc, #376]	; (81008d0 <main+0x4c8>)
 8100758:	691b      	ldr	r3, [r3, #16]
 810075a:	4a5d      	ldr	r2, [pc, #372]	; (81008d0 <main+0x4c8>)
 810075c:	8a91      	ldrh	r1, [r2, #20]
 810075e:	2200      	movs	r2, #0
 8100760:	4618      	mov	r0, r3
 8100762:	f000 fdb5 	bl	81012d0 <HAL_GPIO_WritePin>
 8100766:	4b5a      	ldr	r3, [pc, #360]	; (81008d0 <main+0x4c8>)
 8100768:	699b      	ldr	r3, [r3, #24]
 810076a:	4a59      	ldr	r2, [pc, #356]	; (81008d0 <main+0x4c8>)
 810076c:	8b91      	ldrh	r1, [r2, #28]
 810076e:	2200      	movs	r2, #0
 8100770:	4618      	mov	r0, r3
 8100772:	f000 fdad 	bl	81012d0 <HAL_GPIO_WritePin>
				  engine.state = ENGINE_STOP_STATE;
 8100776:	4b56      	ldr	r3, [pc, #344]	; (81008d0 <main+0x4c8>)
 8100778:	2204      	movs	r2, #4
 810077a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  }
			  break;
 810077e:	e080      	b.n	8100882 <main+0x47a>

		  case ENGINE_RUNNING_STATE:
			  if (engine.set_state.set_state_bits.engine_running_enabled != 0)
 8100780:	4b53      	ldr	r3, [pc, #332]	; (81008d0 <main+0x4c8>)
 8100782:	785b      	ldrb	r3, [r3, #1]
 8100784:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8100788:	b2db      	uxtb	r3, r3
 810078a:	2b00      	cmp	r3, #0
 810078c:	d042      	beq.n	8100814 <main+0x40c>
			  {
				  if (engine.rpm < engine.rpm_range.rpm_minimal)
 810078e:	4b50      	ldr	r3, [pc, #320]	; (81008d0 <main+0x4c8>)
 8100790:	885b      	ldrh	r3, [r3, #2]
 8100792:	b29a      	uxth	r2, r3
 8100794:	4b4e      	ldr	r3, [pc, #312]	; (81008d0 <main+0x4c8>)
 8100796:	899b      	ldrh	r3, [r3, #12]
 8100798:	429a      	cmp	r2, r3
 810079a:	d207      	bcs.n	81007ac <main+0x3a4>
				  {
					  engine.error_id = ERROR_RUNNING_UNDER_MINIMAL_RPM;
 810079c:	4b4c      	ldr	r3, [pc, #304]	; (81008d0 <main+0x4c8>)
 810079e:	2202      	movs	r2, #2
 81007a0:	715a      	strb	r2, [r3, #5]
					  engine.state = ENGINE_ERROR_STATE;
 81007a2:	4b4b      	ldr	r3, [pc, #300]	; (81008d0 <main+0x4c8>)
 81007a4:	2205      	movs	r2, #5
 81007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					  engine.current_state_bits.rpm_underrange = 0;
				  }
			  }
			  else
				  engine.state = ENGINE_STOP_STATE;
			  break;
 81007aa:	e06f      	b.n	810088c <main+0x484>
				  else if (engine.rpm > engine.rpm_range.rpm_maximal)
 81007ac:	4b48      	ldr	r3, [pc, #288]	; (81008d0 <main+0x4c8>)
 81007ae:	885b      	ldrh	r3, [r3, #2]
 81007b0:	b29a      	uxth	r2, r3
 81007b2:	4b47      	ldr	r3, [pc, #284]	; (81008d0 <main+0x4c8>)
 81007b4:	89db      	ldrh	r3, [r3, #14]
 81007b6:	429a      	cmp	r2, r3
 81007b8:	d907      	bls.n	81007ca <main+0x3c2>
					  engine.error_id = ERROR_RUNNING_OVER_MAXIMAL_RPM;
 81007ba:	4b45      	ldr	r3, [pc, #276]	; (81008d0 <main+0x4c8>)
 81007bc:	2203      	movs	r2, #3
 81007be:	715a      	strb	r2, [r3, #5]
					  engine.state = ENGINE_ERROR_STATE;
 81007c0:	4b43      	ldr	r3, [pc, #268]	; (81008d0 <main+0x4c8>)
 81007c2:	2205      	movs	r2, #5
 81007c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  break;
 81007c8:	e060      	b.n	810088c <main+0x484>
				  else if (engine.rpm < engine.rpm_range.rpm_underrange)
 81007ca:	4b41      	ldr	r3, [pc, #260]	; (81008d0 <main+0x4c8>)
 81007cc:	885b      	ldrh	r3, [r3, #2]
 81007ce:	b29a      	uxth	r2, r3
 81007d0:	4b3f      	ldr	r3, [pc, #252]	; (81008d0 <main+0x4c8>)
 81007d2:	891b      	ldrh	r3, [r3, #8]
 81007d4:	429a      	cmp	r2, r3
 81007d6:	d205      	bcs.n	81007e4 <main+0x3dc>
					  engine.current_state_bits.rpm_underrange = 1;
 81007d8:	4a3d      	ldr	r2, [pc, #244]	; (81008d0 <main+0x4c8>)
 81007da:	7913      	ldrb	r3, [r2, #4]
 81007dc:	f043 0320 	orr.w	r3, r3, #32
 81007e0:	7113      	strb	r3, [r2, #4]
			  break;
 81007e2:	e053      	b.n	810088c <main+0x484>
				  else if (engine.rpm > engine.rpm_range.rpm_overrange)
 81007e4:	4b3a      	ldr	r3, [pc, #232]	; (81008d0 <main+0x4c8>)
 81007e6:	885b      	ldrh	r3, [r3, #2]
 81007e8:	b29a      	uxth	r2, r3
 81007ea:	4b39      	ldr	r3, [pc, #228]	; (81008d0 <main+0x4c8>)
 81007ec:	88db      	ldrh	r3, [r3, #6]
 81007ee:	429a      	cmp	r2, r3
 81007f0:	d905      	bls.n	81007fe <main+0x3f6>
					  engine.current_state_bits.rpm_overrange = 1;
 81007f2:	4a37      	ldr	r2, [pc, #220]	; (81008d0 <main+0x4c8>)
 81007f4:	7913      	ldrb	r3, [r2, #4]
 81007f6:	f043 0310 	orr.w	r3, r3, #16
 81007fa:	7113      	strb	r3, [r2, #4]
			  break;
 81007fc:	e046      	b.n	810088c <main+0x484>
					  engine.current_state_bits.rpm_overrange = 0;
 81007fe:	4a34      	ldr	r2, [pc, #208]	; (81008d0 <main+0x4c8>)
 8100800:	7913      	ldrb	r3, [r2, #4]
 8100802:	f36f 1304 	bfc	r3, #4, #1
 8100806:	7113      	strb	r3, [r2, #4]
					  engine.current_state_bits.rpm_underrange = 0;
 8100808:	4a31      	ldr	r2, [pc, #196]	; (81008d0 <main+0x4c8>)
 810080a:	7913      	ldrb	r3, [r2, #4]
 810080c:	f36f 1345 	bfc	r3, #5, #1
 8100810:	7113      	strb	r3, [r2, #4]
			  break;
 8100812:	e03b      	b.n	810088c <main+0x484>
				  engine.state = ENGINE_STOP_STATE;
 8100814:	4b2e      	ldr	r3, [pc, #184]	; (81008d0 <main+0x4c8>)
 8100816:	2204      	movs	r2, #4
 8100818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  break;
 810081c:	e036      	b.n	810088c <main+0x484>
		  case ENGINE_STOP_STATE:

			  __TURN_OFF_STARTER(engine); // just for safety
 810081e:	4b2c      	ldr	r3, [pc, #176]	; (81008d0 <main+0x4c8>)
 8100820:	6a1b      	ldr	r3, [r3, #32]
 8100822:	4a2b      	ldr	r2, [pc, #172]	; (81008d0 <main+0x4c8>)
 8100824:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8100826:	2200      	movs	r2, #0
 8100828:	4618      	mov	r0, r3
 810082a:	f000 fd51 	bl	81012d0 <HAL_GPIO_WritePin>
			  __STOP_ENGINE(engine);
 810082e:	4b28      	ldr	r3, [pc, #160]	; (81008d0 <main+0x4c8>)
 8100830:	691b      	ldr	r3, [r3, #16]
 8100832:	4a27      	ldr	r2, [pc, #156]	; (81008d0 <main+0x4c8>)
 8100834:	8a91      	ldrh	r1, [r2, #20]
 8100836:	2200      	movs	r2, #0
 8100838:	4618      	mov	r0, r3
 810083a:	f000 fd49 	bl	81012d0 <HAL_GPIO_WritePin>
 810083e:	4b24      	ldr	r3, [pc, #144]	; (81008d0 <main+0x4c8>)
 8100840:	699b      	ldr	r3, [r3, #24]
 8100842:	4a23      	ldr	r2, [pc, #140]	; (81008d0 <main+0x4c8>)
 8100844:	8b91      	ldrh	r1, [r2, #28]
 8100846:	2200      	movs	r2, #0
 8100848:	4618      	mov	r0, r3
 810084a:	f000 fd41 	bl	81012d0 <HAL_GPIO_WritePin>
			  if (engine.set_state.set_state_bits.engine_running_enabled == 1)
 810084e:	4b20      	ldr	r3, [pc, #128]	; (81008d0 <main+0x4c8>)
 8100850:	785b      	ldrb	r3, [r3, #1]
 8100852:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8100856:	b2db      	uxtb	r3, r3
 8100858:	2b01      	cmp	r3, #1
 810085a:	d114      	bne.n	8100886 <main+0x47e>
			  {
				  engine.state = ENGINE_START_STATE;
 810085c:	4b1c      	ldr	r3, [pc, #112]	; (81008d0 <main+0x4c8>)
 810085e:	2202      	movs	r2, #2
 8100860:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  }
			  break;
 8100864:	e00f      	b.n	8100886 <main+0x47e>
		  case ENGINE_ERROR_STATE:

			  if (engine.set_state.set_state_bits.reset_error) engine.state = ENGINE_INIT_STATE;
 8100866:	4b1a      	ldr	r3, [pc, #104]	; (81008d0 <main+0x4c8>)
 8100868:	785b      	ldrb	r3, [r3, #1]
 810086a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 810086e:	b2db      	uxtb	r3, r3
 8100870:	2b00      	cmp	r3, #0
 8100872:	d00a      	beq.n	810088a <main+0x482>
 8100874:	4b16      	ldr	r3, [pc, #88]	; (81008d0 <main+0x4c8>)
 8100876:	2201      	movs	r2, #1
 8100878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			  break;
 810087c:	e005      	b.n	810088a <main+0x482>
			  break;
 810087e:	bf00      	nop
 8100880:	e004      	b.n	810088c <main+0x484>
			  break;
 8100882:	bf00      	nop
 8100884:	e002      	b.n	810088c <main+0x484>
			  break;
 8100886:	bf00      	nop
 8100888:	e000      	b.n	810088c <main+0x484>
			  break;
 810088a:	bf00      	nop
	  }
	  HAL_HSEM_Take(2, 2);
 810088c:	2102      	movs	r1, #2
 810088e:	2002      	movs	r0, #2
 8100890:	f000 fd38 	bl	8101304 <HAL_HSEM_Take>

	  dest[0] = engine.rpm>>8;
 8100894:	4b0e      	ldr	r3, [pc, #56]	; (81008d0 <main+0x4c8>)
 8100896:	885b      	ldrh	r3, [r3, #2]
 8100898:	b29b      	uxth	r3, r3
 810089a:	0a1b      	lsrs	r3, r3, #8
 810089c:	b29b      	uxth	r3, r3
 810089e:	b2da      	uxtb	r2, r3
 81008a0:	68fb      	ldr	r3, [r7, #12]
 81008a2:	701a      	strb	r2, [r3, #0]
	  dest[1] = engine.rpm;
 81008a4:	4b0a      	ldr	r3, [pc, #40]	; (81008d0 <main+0x4c8>)
 81008a6:	885b      	ldrh	r3, [r3, #2]
 81008a8:	b29a      	uxth	r2, r3
 81008aa:	68fb      	ldr	r3, [r7, #12]
 81008ac:	3301      	adds	r3, #1
 81008ae:	b2d2      	uxtb	r2, r2
 81008b0:	701a      	strb	r2, [r3, #0]
	  dest[2] = ((char *) &engine.current_state_bits)[0];
 81008b2:	4a08      	ldr	r2, [pc, #32]	; (81008d4 <main+0x4cc>)
 81008b4:	68fb      	ldr	r3, [r7, #12]
 81008b6:	3302      	adds	r3, #2
 81008b8:	7812      	ldrb	r2, [r2, #0]
 81008ba:	701a      	strb	r2, [r3, #0]
	  dest[3] = engine.error_id;
 81008bc:	68fb      	ldr	r3, [r7, #12]
 81008be:	3303      	adds	r3, #3
 81008c0:	4a03      	ldr	r2, [pc, #12]	; (81008d0 <main+0x4c8>)
 81008c2:	7952      	ldrb	r2, [r2, #5]
 81008c4:	701a      	strb	r2, [r3, #0]
	  HAL_HSEM_Release(2, 2);
 81008c6:	2102      	movs	r1, #2
 81008c8:	2002      	movs	r0, #2
 81008ca:	f000 fd3f 	bl	810134c <HAL_HSEM_Release>
  {
 81008ce:	e632      	b.n	8100536 <main+0x12e>
 81008d0:	10000008 	.word	0x10000008
 81008d4:	1000000c 	.word	0x1000000c

081008d8 <HAL_HSEM_FreeCallback>:

	return HAL_OK;
}

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81008d8:	b580      	push	{r7, lr}
 81008da:	b084      	sub	sp, #16
 81008dc:	af00      	add	r7, sp, #0
 81008de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);

  if (__HAL_HSEM_SEMID_TO_MASK(1) == SemMask)
 81008e0:	687b      	ldr	r3, [r7, #4]
 81008e2:	2b02      	cmp	r3, #2
 81008e4:	d109      	bne.n	81008fa <HAL_HSEM_FreeCallback+0x22>
  {
	  char* temp = (char*) &engine;
 81008e6:	4b07      	ldr	r3, [pc, #28]	; (8100904 <HAL_HSEM_FreeCallback+0x2c>)
 81008e8:	60fb      	str	r3, [r7, #12]
	  //for (int i=0; i< engine_struct_size; i++)
	  //{
		  //temp[4] = src[4];
	  engine.set_state.all_byte_data = (uint8_t) src[0];
 81008ea:	4b07      	ldr	r3, [pc, #28]	; (8100908 <HAL_HSEM_FreeCallback+0x30>)
 81008ec:	681b      	ldr	r3, [r3, #0]
 81008ee:	781a      	ldrb	r2, [r3, #0]
 81008f0:	4b04      	ldr	r3, [pc, #16]	; (8100904 <HAL_HSEM_FreeCallback+0x2c>)
 81008f2:	705a      	strb	r2, [r3, #1]
	  //}
	  HAL_HSEM_ActivateNotification(SemMask);
 81008f4:	6878      	ldr	r0, [r7, #4]
 81008f6:	f000 fd3d 	bl	8101374 <HAL_HSEM_ActivateNotification>


  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81008fa:	bf00      	nop
 81008fc:	3710      	adds	r7, #16
 81008fe:	46bd      	mov	sp, r7
 8100900:	bd80      	pop	{r7, pc}
 8100902:	bf00      	nop
 8100904:	10000008 	.word	0x10000008
 8100908:	10000060 	.word	0x10000060

0810090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810090c:	b480      	push	{r7}
 810090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100910:	b672      	cpsid	i
}
 8100912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100914:	e7fe      	b.n	8100914 <Error_Handler+0x8>
	...

08100918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	b082      	sub	sp, #8
 810091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810091e:	4b11      	ldr	r3, [pc, #68]	; (8100964 <HAL_MspInit+0x4c>)
 8100920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100924:	4a0f      	ldr	r2, [pc, #60]	; (8100964 <HAL_MspInit+0x4c>)
 8100926:	f043 0302 	orr.w	r3, r3, #2
 810092a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810092e:	4b0d      	ldr	r3, [pc, #52]	; (8100964 <HAL_MspInit+0x4c>)
 8100930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100934:	f003 0302 	and.w	r3, r3, #2
 8100938:	607b      	str	r3, [r7, #4]
 810093a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 810093c:	2200      	movs	r2, #0
 810093e:	2100      	movs	r1, #0
 8100940:	2040      	movs	r0, #64	; 0x40
 8100942:	f000 facc 	bl	8100ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8100946:	2040      	movs	r0, #64	; 0x40
 8100948:	f000 fae3 	bl	8100f12 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 810094c:	2200      	movs	r2, #0
 810094e:	2100      	movs	r1, #0
 8100950:	207e      	movs	r0, #126	; 0x7e
 8100952:	f000 fac4 	bl	8100ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100956:	207e      	movs	r0, #126	; 0x7e
 8100958:	f000 fadb 	bl	8100f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810095c:	bf00      	nop
 810095e:	3708      	adds	r7, #8
 8100960:	46bd      	mov	sp, r7
 8100962:	bd80      	pop	{r7, pc}
 8100964:	58024400 	.word	0x58024400

08100968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100968:	b480      	push	{r7}
 810096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810096c:	e7fe      	b.n	810096c <NMI_Handler+0x4>

0810096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810096e:	b480      	push	{r7}
 8100970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100972:	e7fe      	b.n	8100972 <HardFault_Handler+0x4>

08100974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100974:	b480      	push	{r7}
 8100976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100978:	e7fe      	b.n	8100978 <MemManage_Handler+0x4>

0810097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810097a:	b480      	push	{r7}
 810097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810097e:	e7fe      	b.n	810097e <BusFault_Handler+0x4>

08100980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100980:	b480      	push	{r7}
 8100982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100984:	e7fe      	b.n	8100984 <UsageFault_Handler+0x4>

08100986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100986:	b480      	push	{r7}
 8100988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810098a:	bf00      	nop
 810098c:	46bd      	mov	sp, r7
 810098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100992:	4770      	bx	lr

08100994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100994:	b480      	push	{r7}
 8100996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100998:	bf00      	nop
 810099a:	46bd      	mov	sp, r7
 810099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009a0:	4770      	bx	lr

081009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81009a2:	b480      	push	{r7}
 81009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81009a6:	bf00      	nop
 81009a8:	46bd      	mov	sp, r7
 81009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009ae:	4770      	bx	lr

081009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81009b4:	f000 f998 	bl	8100ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81009b8:	bf00      	nop
 81009ba:	bd80      	pop	{r7, pc}

081009bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 81009bc:	b580      	push	{r7, lr}
 81009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	static int count;
	if(__HAL_TIM_GET_FLAG(&htim13, TIM_FLAG_CC1) != RESET)//__HAL_TIM_GET_IT_SOURCE(&htim5, TIM_IT_CC1) == 1)
 81009c0:	4b13      	ldr	r3, [pc, #76]	; (8100a10 <TIM8_UP_TIM13_IRQHandler+0x54>)
 81009c2:	681b      	ldr	r3, [r3, #0]
 81009c4:	691b      	ldr	r3, [r3, #16]
 81009c6:	f003 0302 	and.w	r3, r3, #2
 81009ca:	2b02      	cmp	r3, #2
 81009cc:	d104      	bne.n	81009d8 <TIM8_UP_TIM13_IRQHandler+0x1c>
	{
		count++;
 81009ce:	4b11      	ldr	r3, [pc, #68]	; (8100a14 <TIM8_UP_TIM13_IRQHandler+0x58>)
 81009d0:	681b      	ldr	r3, [r3, #0]
 81009d2:	3301      	adds	r3, #1
 81009d4:	4a0f      	ldr	r2, [pc, #60]	; (8100a14 <TIM8_UP_TIM13_IRQHandler+0x58>)
 81009d6:	6013      	str	r3, [r2, #0]
	}
	if (__HAL_TIM_GET_FLAG(&htim13, TIM_FLAG_UPDATE) == 1)
 81009d8:	4b0d      	ldr	r3, [pc, #52]	; (8100a10 <TIM8_UP_TIM13_IRQHandler+0x54>)
 81009da:	681b      	ldr	r3, [r3, #0]
 81009dc:	691b      	ldr	r3, [r3, #16]
 81009de:	f003 0301 	and.w	r3, r3, #1
 81009e2:	2b01      	cmp	r3, #1
 81009e4:	d10f      	bne.n	8100a06 <TIM8_UP_TIM13_IRQHandler+0x4a>
	{
		engine.rpm = (uint16_t)(count*5*60);
 81009e6:	4b0b      	ldr	r3, [pc, #44]	; (8100a14 <TIM8_UP_TIM13_IRQHandler+0x58>)
 81009e8:	681b      	ldr	r3, [r3, #0]
 81009ea:	b29b      	uxth	r3, r3
 81009ec:	461a      	mov	r2, r3
 81009ee:	0092      	lsls	r2, r2, #2
 81009f0:	4413      	add	r3, r2
 81009f2:	461a      	mov	r2, r3
 81009f4:	0112      	lsls	r2, r2, #4
 81009f6:	1ad3      	subs	r3, r2, r3
 81009f8:	009b      	lsls	r3, r3, #2
 81009fa:	b29a      	uxth	r2, r3
 81009fc:	4b06      	ldr	r3, [pc, #24]	; (8100a18 <TIM8_UP_TIM13_IRQHandler+0x5c>)
 81009fe:	805a      	strh	r2, [r3, #2]
		count = 0;
 8100a00:	4b04      	ldr	r3, [pc, #16]	; (8100a14 <TIM8_UP_TIM13_IRQHandler+0x58>)
 8100a02:	2200      	movs	r2, #0
 8100a04:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8100a06:	4802      	ldr	r0, [pc, #8]	; (8100a10 <TIM8_UP_TIM13_IRQHandler+0x54>)
 8100a08:	f001 f8da 	bl	8101bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8100a0c:	bf00      	nop
 8100a0e:	bd80      	pop	{r7, pc}
 8100a10:	1000006c 	.word	0x1000006c
 8100a14:	10000068 	.word	0x10000068
 8100a18:	10000008 	.word	0x10000008

08100a1c <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100a1c:	b480      	push	{r7}
 8100a1e:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100a20:	bf00      	nop
 8100a22:	46bd      	mov	sp, r7
 8100a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a28:	4770      	bx	lr

08100a2a <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100a2a:	b580      	push	{r7, lr}
 8100a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100a2e:	f000 fcb3 	bl	8101398 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100a32:	bf00      	nop
 8100a34:	bd80      	pop	{r7, pc}
	...

08100a38 <MX_TIM13_Init>:

TIM_HandleTypeDef htim13;

/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8100a38:	b580      	push	{r7, lr}
 8100a3a:	b084      	sub	sp, #16
 8100a3c:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef sConfigIC = {0};
 8100a3e:	463b      	mov	r3, r7
 8100a40:	2200      	movs	r2, #0
 8100a42:	601a      	str	r2, [r3, #0]
 8100a44:	605a      	str	r2, [r3, #4]
 8100a46:	609a      	str	r2, [r3, #8]
 8100a48:	60da      	str	r2, [r3, #12]

  htim13.Instance = TIM13;
 8100a4a:	4b1d      	ldr	r3, [pc, #116]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a4c:	4a1d      	ldr	r2, [pc, #116]	; (8100ac4 <MX_TIM13_Init+0x8c>)
 8100a4e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 10000;
 8100a50:	4b1b      	ldr	r3, [pc, #108]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a52:	f242 7210 	movw	r2, #10000	; 0x2710
 8100a56:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100a58:	4b19      	ldr	r3, [pc, #100]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a5a:	2200      	movs	r2, #0
 8100a5c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4800;
 8100a5e:	4b18      	ldr	r3, [pc, #96]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a60:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8100a64:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100a66:	4b16      	ldr	r3, [pc, #88]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a68:	2200      	movs	r2, #0
 8100a6a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8100a6c:	4b14      	ldr	r3, [pc, #80]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a6e:	2280      	movs	r2, #128	; 0x80
 8100a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100a72:	4813      	ldr	r0, [pc, #76]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a74:	f000 feac 	bl	81017d0 <HAL_TIM_Base_Init>
 8100a78:	4603      	mov	r3, r0
 8100a7a:	2b00      	cmp	r3, #0
 8100a7c:	d001      	beq.n	8100a82 <MX_TIM13_Init+0x4a>
  {
    Error_Handler();
 8100a7e:	f7ff ff45 	bl	810090c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100a82:	480f      	ldr	r0, [pc, #60]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100a84:	f000 ff32 	bl	81018ec <HAL_TIM_IC_Init>
 8100a88:	4603      	mov	r3, r0
 8100a8a:	2b00      	cmp	r3, #0
 8100a8c:	d001      	beq.n	8100a92 <MX_TIM13_Init+0x5a>
  {
    Error_Handler();
 8100a8e:	f7ff ff3d 	bl	810090c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100a92:	2300      	movs	r3, #0
 8100a94:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100a96:	2301      	movs	r3, #1
 8100a98:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100a9a:	2300      	movs	r3, #0
 8100a9c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100a9e:	2300      	movs	r3, #0
 8100aa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100aa2:	463b      	mov	r3, r7
 8100aa4:	2200      	movs	r2, #0
 8100aa6:	4619      	mov	r1, r3
 8100aa8:	4805      	ldr	r0, [pc, #20]	; (8100ac0 <MX_TIM13_Init+0x88>)
 8100aaa:	f001 f9a8 	bl	8101dfe <HAL_TIM_IC_ConfigChannel>
 8100aae:	4603      	mov	r3, r0
 8100ab0:	2b00      	cmp	r3, #0
 8100ab2:	d001      	beq.n	8100ab8 <MX_TIM13_Init+0x80>
  {
    Error_Handler();
 8100ab4:	f7ff ff2a 	bl	810090c <Error_Handler>
  }

}
 8100ab8:	bf00      	nop
 8100aba:	3710      	adds	r7, #16
 8100abc:	46bd      	mov	sp, r7
 8100abe:	bd80      	pop	{r7, pc}
 8100ac0:	1000006c 	.word	0x1000006c
 8100ac4:	40001c00 	.word	0x40001c00

08100ac8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	b08a      	sub	sp, #40	; 0x28
 8100acc:	af00      	add	r7, sp, #0
 8100ace:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ad0:	f107 0314 	add.w	r3, r7, #20
 8100ad4:	2200      	movs	r2, #0
 8100ad6:	601a      	str	r2, [r3, #0]
 8100ad8:	605a      	str	r2, [r3, #4]
 8100ada:	609a      	str	r2, [r3, #8]
 8100adc:	60da      	str	r2, [r3, #12]
 8100ade:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM13)
 8100ae0:	687b      	ldr	r3, [r7, #4]
 8100ae2:	681b      	ldr	r3, [r3, #0]
 8100ae4:	4a1e      	ldr	r2, [pc, #120]	; (8100b60 <HAL_TIM_Base_MspInit+0x98>)
 8100ae6:	4293      	cmp	r3, r2
 8100ae8:	d136      	bne.n	8100b58 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* TIM13 clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100aea:	4b1e      	ldr	r3, [pc, #120]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100af0:	4a1c      	ldr	r2, [pc, #112]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100af6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100afa:	4b1a      	ldr	r3, [pc, #104]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100b04:	613b      	str	r3, [r7, #16]
 8100b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b08:	4b16      	ldr	r3, [pc, #88]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b0e:	4a15      	ldr	r2, [pc, #84]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100b10:	f043 0320 	orr.w	r3, r3, #32
 8100b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b18:	4b12      	ldr	r3, [pc, #72]	; (8100b64 <HAL_TIM_Base_MspInit+0x9c>)
 8100b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1e:	f003 0320 	and.w	r3, r3, #32
 8100b22:	60fb      	str	r3, [r7, #12]
 8100b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8100b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b2c:	2302      	movs	r3, #2
 8100b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8100b30:	2301      	movs	r3, #1
 8100b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b34:	2300      	movs	r3, #0
 8100b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8100b38:	2309      	movs	r3, #9
 8100b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100b3c:	f107 0314 	add.w	r3, r7, #20
 8100b40:	4619      	mov	r1, r3
 8100b42:	4809      	ldr	r0, [pc, #36]	; (8100b68 <HAL_TIM_Base_MspInit+0xa0>)
 8100b44:	f000 fa14 	bl	8100f70 <HAL_GPIO_Init>

    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8100b48:	2200      	movs	r2, #0
 8100b4a:	2100      	movs	r1, #0
 8100b4c:	202c      	movs	r0, #44	; 0x2c
 8100b4e:	f000 f9c6 	bl	8100ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8100b52:	202c      	movs	r0, #44	; 0x2c
 8100b54:	f000 f9dd 	bl	8100f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8100b58:	bf00      	nop
 8100b5a:	3728      	adds	r7, #40	; 0x28
 8100b5c:	46bd      	mov	sp, r7
 8100b5e:	bd80      	pop	{r7, pc}
 8100b60:	40001c00 	.word	0x40001c00
 8100b64:	58024400 	.word	0x58024400
 8100b68:	58021400 	.word	0x58021400

08100b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100ba4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8100b70:	f7ff fbb2 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100b76:	e003      	b.n	8100b80 <LoopCopyDataInit>

08100b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100b78:	4b0b      	ldr	r3, [pc, #44]	; (8100ba8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8100b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8100b7e:	3104      	adds	r1, #4

08100b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100b80:	480a      	ldr	r0, [pc, #40]	; (8100bac <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8100b82:	4b0b      	ldr	r3, [pc, #44]	; (8100bb0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8100b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100b88:	d3f6      	bcc.n	8100b78 <CopyDataInit>
  ldr  r2, =_sbss
 8100b8a:	4a0a      	ldr	r2, [pc, #40]	; (8100bb4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8100b8c:	e002      	b.n	8100b94 <LoopFillZerobss>

08100b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8100b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8100b90:	f842 3b04 	str.w	r3, [r2], #4

08100b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8100b94:	4b08      	ldr	r3, [pc, #32]	; (8100bb8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8100b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8100b98:	d3f9      	bcc.n	8100b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100b9a:	f001 fbff 	bl	810239c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100b9e:	f7ff fc33 	bl	8100408 <main>
  bx  lr    
 8100ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100ba4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8100ba8:	08102414 	.word	0x08102414
  ldr  r0, =_sdata
 8100bac:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8100bb0:	10000044 	.word	0x10000044
  ldr  r2, =_sbss
 8100bb4:	10000044 	.word	0x10000044
  ldr  r3, = _ebss
 8100bb8:	100000bc 	.word	0x100000bc

08100bbc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100bbc:	e7fe      	b.n	8100bbc <ADC3_IRQHandler>
	...

08100bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100bc0:	b580      	push	{r7, lr}
 8100bc2:	b082      	sub	sp, #8
 8100bc4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100bc6:	4b28      	ldr	r3, [pc, #160]	; (8100c68 <HAL_Init+0xa8>)
 8100bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100bcc:	4a26      	ldr	r2, [pc, #152]	; (8100c68 <HAL_Init+0xa8>)
 8100bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100bd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100bd6:	4b24      	ldr	r3, [pc, #144]	; (8100c68 <HAL_Init+0xa8>)
 8100bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100be0:	603b      	str	r3, [r7, #0]
 8100be2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100be4:	4b21      	ldr	r3, [pc, #132]	; (8100c6c <HAL_Init+0xac>)
 8100be6:	681b      	ldr	r3, [r3, #0]
 8100be8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100bf0:	4a1e      	ldr	r2, [pc, #120]	; (8100c6c <HAL_Init+0xac>)
 8100bf2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100bf6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100bf8:	4b1c      	ldr	r3, [pc, #112]	; (8100c6c <HAL_Init+0xac>)
 8100bfa:	681b      	ldr	r3, [r3, #0]
 8100bfc:	4a1b      	ldr	r2, [pc, #108]	; (8100c6c <HAL_Init+0xac>)
 8100bfe:	f043 0301 	orr.w	r3, r3, #1
 8100c02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100c04:	2003      	movs	r0, #3
 8100c06:	f000 f95f 	bl	8100ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100c0a:	f000 fc67 	bl	81014dc <HAL_RCC_GetSysClockFreq>
 8100c0e:	4602      	mov	r2, r0
 8100c10:	4b15      	ldr	r3, [pc, #84]	; (8100c68 <HAL_Init+0xa8>)
 8100c12:	699b      	ldr	r3, [r3, #24]
 8100c14:	0a1b      	lsrs	r3, r3, #8
 8100c16:	f003 030f 	and.w	r3, r3, #15
 8100c1a:	4915      	ldr	r1, [pc, #84]	; (8100c70 <HAL_Init+0xb0>)
 8100c1c:	5ccb      	ldrb	r3, [r1, r3]
 8100c1e:	f003 031f 	and.w	r3, r3, #31
 8100c22:	fa22 f303 	lsr.w	r3, r2, r3
 8100c26:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100c28:	4b0f      	ldr	r3, [pc, #60]	; (8100c68 <HAL_Init+0xa8>)
 8100c2a:	699b      	ldr	r3, [r3, #24]
 8100c2c:	f003 030f 	and.w	r3, r3, #15
 8100c30:	4a0f      	ldr	r2, [pc, #60]	; (8100c70 <HAL_Init+0xb0>)
 8100c32:	5cd3      	ldrb	r3, [r2, r3]
 8100c34:	f003 031f 	and.w	r3, r3, #31
 8100c38:	687a      	ldr	r2, [r7, #4]
 8100c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8100c3e:	4a0d      	ldr	r2, [pc, #52]	; (8100c74 <HAL_Init+0xb4>)
 8100c40:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100c42:	4b0c      	ldr	r3, [pc, #48]	; (8100c74 <HAL_Init+0xb4>)
 8100c44:	681b      	ldr	r3, [r3, #0]
 8100c46:	4a0c      	ldr	r2, [pc, #48]	; (8100c78 <HAL_Init+0xb8>)
 8100c48:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100c4a:	2000      	movs	r0, #0
 8100c4c:	f000 f816 	bl	8100c7c <HAL_InitTick>
 8100c50:	4603      	mov	r3, r0
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d001      	beq.n	8100c5a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100c56:	2301      	movs	r3, #1
 8100c58:	e002      	b.n	8100c60 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100c5a:	f7ff fe5d 	bl	8100918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100c5e:	2300      	movs	r3, #0
}
 8100c60:	4618      	mov	r0, r3
 8100c62:	3708      	adds	r7, #8
 8100c64:	46bd      	mov	sp, r7
 8100c66:	bd80      	pop	{r7, pc}
 8100c68:	58024400 	.word	0x58024400
 8100c6c:	40024400 	.word	0x40024400
 8100c70:	081023fc 	.word	0x081023fc
 8100c74:	10000004 	.word	0x10000004
 8100c78:	10000000 	.word	0x10000000

08100c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100c7c:	b580      	push	{r7, lr}
 8100c7e:	b082      	sub	sp, #8
 8100c80:	af00      	add	r7, sp, #0
 8100c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100c84:	4b15      	ldr	r3, [pc, #84]	; (8100cdc <HAL_InitTick+0x60>)
 8100c86:	781b      	ldrb	r3, [r3, #0]
 8100c88:	2b00      	cmp	r3, #0
 8100c8a:	d101      	bne.n	8100c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100c8c:	2301      	movs	r3, #1
 8100c8e:	e021      	b.n	8100cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100c90:	4b13      	ldr	r3, [pc, #76]	; (8100ce0 <HAL_InitTick+0x64>)
 8100c92:	681a      	ldr	r2, [r3, #0]
 8100c94:	4b11      	ldr	r3, [pc, #68]	; (8100cdc <HAL_InitTick+0x60>)
 8100c96:	781b      	ldrb	r3, [r3, #0]
 8100c98:	4619      	mov	r1, r3
 8100c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8100ca6:	4618      	mov	r0, r3
 8100ca8:	f000 f941 	bl	8100f2e <HAL_SYSTICK_Config>
 8100cac:	4603      	mov	r3, r0
 8100cae:	2b00      	cmp	r3, #0
 8100cb0:	d001      	beq.n	8100cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100cb2:	2301      	movs	r3, #1
 8100cb4:	e00e      	b.n	8100cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100cb6:	687b      	ldr	r3, [r7, #4]
 8100cb8:	2b0f      	cmp	r3, #15
 8100cba:	d80a      	bhi.n	8100cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	6879      	ldr	r1, [r7, #4]
 8100cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8100cc4:	f000 f90b 	bl	8100ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100cc8:	4a06      	ldr	r2, [pc, #24]	; (8100ce4 <HAL_InitTick+0x68>)
 8100cca:	687b      	ldr	r3, [r7, #4]
 8100ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100cce:	2300      	movs	r3, #0
 8100cd0:	e000      	b.n	8100cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100cd2:	2301      	movs	r3, #1
}
 8100cd4:	4618      	mov	r0, r3
 8100cd6:	3708      	adds	r7, #8
 8100cd8:	46bd      	mov	sp, r7
 8100cda:	bd80      	pop	{r7, pc}
 8100cdc:	10000040 	.word	0x10000040
 8100ce0:	10000000 	.word	0x10000000
 8100ce4:	1000003c 	.word	0x1000003c

08100ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ce8:	b480      	push	{r7}
 8100cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100cec:	4b06      	ldr	r3, [pc, #24]	; (8100d08 <HAL_IncTick+0x20>)
 8100cee:	781b      	ldrb	r3, [r3, #0]
 8100cf0:	461a      	mov	r2, r3
 8100cf2:	4b06      	ldr	r3, [pc, #24]	; (8100d0c <HAL_IncTick+0x24>)
 8100cf4:	681b      	ldr	r3, [r3, #0]
 8100cf6:	4413      	add	r3, r2
 8100cf8:	4a04      	ldr	r2, [pc, #16]	; (8100d0c <HAL_IncTick+0x24>)
 8100cfa:	6013      	str	r3, [r2, #0]
}
 8100cfc:	bf00      	nop
 8100cfe:	46bd      	mov	sp, r7
 8100d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d04:	4770      	bx	lr
 8100d06:	bf00      	nop
 8100d08:	10000040 	.word	0x10000040
 8100d0c:	100000b8 	.word	0x100000b8

08100d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100d10:	b480      	push	{r7}
 8100d12:	af00      	add	r7, sp, #0
  return uwTick;
 8100d14:	4b03      	ldr	r3, [pc, #12]	; (8100d24 <HAL_GetTick+0x14>)
 8100d16:	681b      	ldr	r3, [r3, #0]
}
 8100d18:	4618      	mov	r0, r3
 8100d1a:	46bd      	mov	sp, r7
 8100d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d20:	4770      	bx	lr
 8100d22:	bf00      	nop
 8100d24:	100000b8 	.word	0x100000b8

08100d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100d28:	b480      	push	{r7}
 8100d2a:	b085      	sub	sp, #20
 8100d2c:	af00      	add	r7, sp, #0
 8100d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100d30:	687b      	ldr	r3, [r7, #4]
 8100d32:	f003 0307 	and.w	r3, r3, #7
 8100d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100d38:	4b0c      	ldr	r3, [pc, #48]	; (8100d6c <__NVIC_SetPriorityGrouping+0x44>)
 8100d3a:	68db      	ldr	r3, [r3, #12]
 8100d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100d3e:	68ba      	ldr	r2, [r7, #8]
 8100d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100d44:	4013      	ands	r3, r2
 8100d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100d48:	68fb      	ldr	r3, [r7, #12]
 8100d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100d4c:	68bb      	ldr	r3, [r7, #8]
 8100d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100d5a:	4a04      	ldr	r2, [pc, #16]	; (8100d6c <__NVIC_SetPriorityGrouping+0x44>)
 8100d5c:	68bb      	ldr	r3, [r7, #8]
 8100d5e:	60d3      	str	r3, [r2, #12]
}
 8100d60:	bf00      	nop
 8100d62:	3714      	adds	r7, #20
 8100d64:	46bd      	mov	sp, r7
 8100d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d6a:	4770      	bx	lr
 8100d6c:	e000ed00 	.word	0xe000ed00

08100d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100d70:	b480      	push	{r7}
 8100d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100d74:	4b04      	ldr	r3, [pc, #16]	; (8100d88 <__NVIC_GetPriorityGrouping+0x18>)
 8100d76:	68db      	ldr	r3, [r3, #12]
 8100d78:	0a1b      	lsrs	r3, r3, #8
 8100d7a:	f003 0307 	and.w	r3, r3, #7
}
 8100d7e:	4618      	mov	r0, r3
 8100d80:	46bd      	mov	sp, r7
 8100d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d86:	4770      	bx	lr
 8100d88:	e000ed00 	.word	0xe000ed00

08100d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100d8c:	b480      	push	{r7}
 8100d8e:	b083      	sub	sp, #12
 8100d90:	af00      	add	r7, sp, #0
 8100d92:	4603      	mov	r3, r0
 8100d94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d9a:	2b00      	cmp	r3, #0
 8100d9c:	db0b      	blt.n	8100db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100d9e:	88fb      	ldrh	r3, [r7, #6]
 8100da0:	f003 021f 	and.w	r2, r3, #31
 8100da4:	4907      	ldr	r1, [pc, #28]	; (8100dc4 <__NVIC_EnableIRQ+0x38>)
 8100da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100daa:	095b      	lsrs	r3, r3, #5
 8100dac:	2001      	movs	r0, #1
 8100dae:	fa00 f202 	lsl.w	r2, r0, r2
 8100db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8100db6:	bf00      	nop
 8100db8:	370c      	adds	r7, #12
 8100dba:	46bd      	mov	sp, r7
 8100dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dc0:	4770      	bx	lr
 8100dc2:	bf00      	nop
 8100dc4:	e000e100 	.word	0xe000e100

08100dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100dc8:	b480      	push	{r7}
 8100dca:	b083      	sub	sp, #12
 8100dcc:	af00      	add	r7, sp, #0
 8100dce:	4603      	mov	r3, r0
 8100dd0:	6039      	str	r1, [r7, #0]
 8100dd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100dd8:	2b00      	cmp	r3, #0
 8100dda:	db0a      	blt.n	8100df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100ddc:	683b      	ldr	r3, [r7, #0]
 8100dde:	b2da      	uxtb	r2, r3
 8100de0:	490c      	ldr	r1, [pc, #48]	; (8100e14 <__NVIC_SetPriority+0x4c>)
 8100de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100de6:	0112      	lsls	r2, r2, #4
 8100de8:	b2d2      	uxtb	r2, r2
 8100dea:	440b      	add	r3, r1
 8100dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100df0:	e00a      	b.n	8100e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100df2:	683b      	ldr	r3, [r7, #0]
 8100df4:	b2da      	uxtb	r2, r3
 8100df6:	4908      	ldr	r1, [pc, #32]	; (8100e18 <__NVIC_SetPriority+0x50>)
 8100df8:	88fb      	ldrh	r3, [r7, #6]
 8100dfa:	f003 030f 	and.w	r3, r3, #15
 8100dfe:	3b04      	subs	r3, #4
 8100e00:	0112      	lsls	r2, r2, #4
 8100e02:	b2d2      	uxtb	r2, r2
 8100e04:	440b      	add	r3, r1
 8100e06:	761a      	strb	r2, [r3, #24]
}
 8100e08:	bf00      	nop
 8100e0a:	370c      	adds	r7, #12
 8100e0c:	46bd      	mov	sp, r7
 8100e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e12:	4770      	bx	lr
 8100e14:	e000e100 	.word	0xe000e100
 8100e18:	e000ed00 	.word	0xe000ed00

08100e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100e1c:	b480      	push	{r7}
 8100e1e:	b089      	sub	sp, #36	; 0x24
 8100e20:	af00      	add	r7, sp, #0
 8100e22:	60f8      	str	r0, [r7, #12]
 8100e24:	60b9      	str	r1, [r7, #8]
 8100e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100e28:	68fb      	ldr	r3, [r7, #12]
 8100e2a:	f003 0307 	and.w	r3, r3, #7
 8100e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100e30:	69fb      	ldr	r3, [r7, #28]
 8100e32:	f1c3 0307 	rsb	r3, r3, #7
 8100e36:	2b04      	cmp	r3, #4
 8100e38:	bf28      	it	cs
 8100e3a:	2304      	movcs	r3, #4
 8100e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100e3e:	69fb      	ldr	r3, [r7, #28]
 8100e40:	3304      	adds	r3, #4
 8100e42:	2b06      	cmp	r3, #6
 8100e44:	d902      	bls.n	8100e4c <NVIC_EncodePriority+0x30>
 8100e46:	69fb      	ldr	r3, [r7, #28]
 8100e48:	3b03      	subs	r3, #3
 8100e4a:	e000      	b.n	8100e4e <NVIC_EncodePriority+0x32>
 8100e4c:	2300      	movs	r3, #0
 8100e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100e50:	f04f 32ff 	mov.w	r2, #4294967295
 8100e54:	69bb      	ldr	r3, [r7, #24]
 8100e56:	fa02 f303 	lsl.w	r3, r2, r3
 8100e5a:	43da      	mvns	r2, r3
 8100e5c:	68bb      	ldr	r3, [r7, #8]
 8100e5e:	401a      	ands	r2, r3
 8100e60:	697b      	ldr	r3, [r7, #20]
 8100e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100e64:	f04f 31ff 	mov.w	r1, #4294967295
 8100e68:	697b      	ldr	r3, [r7, #20]
 8100e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8100e6e:	43d9      	mvns	r1, r3
 8100e70:	687b      	ldr	r3, [r7, #4]
 8100e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100e74:	4313      	orrs	r3, r2
         );
}
 8100e76:	4618      	mov	r0, r3
 8100e78:	3724      	adds	r7, #36	; 0x24
 8100e7a:	46bd      	mov	sp, r7
 8100e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e80:	4770      	bx	lr
	...

08100e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100e84:	b580      	push	{r7, lr}
 8100e86:	b082      	sub	sp, #8
 8100e88:	af00      	add	r7, sp, #0
 8100e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100e8c:	687b      	ldr	r3, [r7, #4]
 8100e8e:	3b01      	subs	r3, #1
 8100e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100e94:	d301      	bcc.n	8100e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100e96:	2301      	movs	r3, #1
 8100e98:	e00f      	b.n	8100eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100e9a:	4a0a      	ldr	r2, [pc, #40]	; (8100ec4 <SysTick_Config+0x40>)
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	3b01      	subs	r3, #1
 8100ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100ea2:	210f      	movs	r1, #15
 8100ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8100ea8:	f7ff ff8e 	bl	8100dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100eac:	4b05      	ldr	r3, [pc, #20]	; (8100ec4 <SysTick_Config+0x40>)
 8100eae:	2200      	movs	r2, #0
 8100eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100eb2:	4b04      	ldr	r3, [pc, #16]	; (8100ec4 <SysTick_Config+0x40>)
 8100eb4:	2207      	movs	r2, #7
 8100eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100eb8:	2300      	movs	r3, #0
}
 8100eba:	4618      	mov	r0, r3
 8100ebc:	3708      	adds	r7, #8
 8100ebe:	46bd      	mov	sp, r7
 8100ec0:	bd80      	pop	{r7, pc}
 8100ec2:	bf00      	nop
 8100ec4:	e000e010 	.word	0xe000e010

08100ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ec8:	b580      	push	{r7, lr}
 8100eca:	b082      	sub	sp, #8
 8100ecc:	af00      	add	r7, sp, #0
 8100ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100ed0:	6878      	ldr	r0, [r7, #4]
 8100ed2:	f7ff ff29 	bl	8100d28 <__NVIC_SetPriorityGrouping>
}
 8100ed6:	bf00      	nop
 8100ed8:	3708      	adds	r7, #8
 8100eda:	46bd      	mov	sp, r7
 8100edc:	bd80      	pop	{r7, pc}

08100ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ede:	b580      	push	{r7, lr}
 8100ee0:	b086      	sub	sp, #24
 8100ee2:	af00      	add	r7, sp, #0
 8100ee4:	4603      	mov	r3, r0
 8100ee6:	60b9      	str	r1, [r7, #8]
 8100ee8:	607a      	str	r2, [r7, #4]
 8100eea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100eec:	f7ff ff40 	bl	8100d70 <__NVIC_GetPriorityGrouping>
 8100ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100ef2:	687a      	ldr	r2, [r7, #4]
 8100ef4:	68b9      	ldr	r1, [r7, #8]
 8100ef6:	6978      	ldr	r0, [r7, #20]
 8100ef8:	f7ff ff90 	bl	8100e1c <NVIC_EncodePriority>
 8100efc:	4602      	mov	r2, r0
 8100efe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100f02:	4611      	mov	r1, r2
 8100f04:	4618      	mov	r0, r3
 8100f06:	f7ff ff5f 	bl	8100dc8 <__NVIC_SetPriority>
}
 8100f0a:	bf00      	nop
 8100f0c:	3718      	adds	r7, #24
 8100f0e:	46bd      	mov	sp, r7
 8100f10:	bd80      	pop	{r7, pc}

08100f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f12:	b580      	push	{r7, lr}
 8100f14:	b082      	sub	sp, #8
 8100f16:	af00      	add	r7, sp, #0
 8100f18:	4603      	mov	r3, r0
 8100f1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100f1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f20:	4618      	mov	r0, r3
 8100f22:	f7ff ff33 	bl	8100d8c <__NVIC_EnableIRQ>
}
 8100f26:	bf00      	nop
 8100f28:	3708      	adds	r7, #8
 8100f2a:	46bd      	mov	sp, r7
 8100f2c:	bd80      	pop	{r7, pc}

08100f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100f2e:	b580      	push	{r7, lr}
 8100f30:	b082      	sub	sp, #8
 8100f32:	af00      	add	r7, sp, #0
 8100f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100f36:	6878      	ldr	r0, [r7, #4]
 8100f38:	f7ff ffa4 	bl	8100e84 <SysTick_Config>
 8100f3c:	4603      	mov	r3, r0
}
 8100f3e:	4618      	mov	r0, r3
 8100f40:	3708      	adds	r7, #8
 8100f42:	46bd      	mov	sp, r7
 8100f44:	bd80      	pop	{r7, pc}
	...

08100f48 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100f48:	b480      	push	{r7}
 8100f4a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100f4c:	4b07      	ldr	r3, [pc, #28]	; (8100f6c <HAL_GetCurrentCPUID+0x24>)
 8100f4e:	681b      	ldr	r3, [r3, #0]
 8100f50:	091b      	lsrs	r3, r3, #4
 8100f52:	f003 030f 	and.w	r3, r3, #15
 8100f56:	2b07      	cmp	r3, #7
 8100f58:	d101      	bne.n	8100f5e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100f5a:	2303      	movs	r3, #3
 8100f5c:	e000      	b.n	8100f60 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100f5e:	2301      	movs	r3, #1
  }
}
 8100f60:	4618      	mov	r0, r3
 8100f62:	46bd      	mov	sp, r7
 8100f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f68:	4770      	bx	lr
 8100f6a:	bf00      	nop
 8100f6c:	e000ed00 	.word	0xe000ed00

08100f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100f70:	b480      	push	{r7}
 8100f72:	b089      	sub	sp, #36	; 0x24
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
 8100f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100f7a:	2300      	movs	r3, #0
 8100f7c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100f7e:	4b89      	ldr	r3, [pc, #548]	; (81011a4 <HAL_GPIO_Init+0x234>)
 8100f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100f82:	e194      	b.n	81012ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100f84:	683b      	ldr	r3, [r7, #0]
 8100f86:	681a      	ldr	r2, [r3, #0]
 8100f88:	2101      	movs	r1, #1
 8100f8a:	69fb      	ldr	r3, [r7, #28]
 8100f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8100f90:	4013      	ands	r3, r2
 8100f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100f94:	693b      	ldr	r3, [r7, #16]
 8100f96:	2b00      	cmp	r3, #0
 8100f98:	f000 8186 	beq.w	81012a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100f9c:	683b      	ldr	r3, [r7, #0]
 8100f9e:	685b      	ldr	r3, [r3, #4]
 8100fa0:	2b01      	cmp	r3, #1
 8100fa2:	d00b      	beq.n	8100fbc <HAL_GPIO_Init+0x4c>
 8100fa4:	683b      	ldr	r3, [r7, #0]
 8100fa6:	685b      	ldr	r3, [r3, #4]
 8100fa8:	2b02      	cmp	r3, #2
 8100faa:	d007      	beq.n	8100fbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100fac:	683b      	ldr	r3, [r7, #0]
 8100fae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100fb0:	2b11      	cmp	r3, #17
 8100fb2:	d003      	beq.n	8100fbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100fb4:	683b      	ldr	r3, [r7, #0]
 8100fb6:	685b      	ldr	r3, [r3, #4]
 8100fb8:	2b12      	cmp	r3, #18
 8100fba:	d130      	bne.n	810101e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100fbc:	687b      	ldr	r3, [r7, #4]
 8100fbe:	689b      	ldr	r3, [r3, #8]
 8100fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100fc2:	69fb      	ldr	r3, [r7, #28]
 8100fc4:	005b      	lsls	r3, r3, #1
 8100fc6:	2203      	movs	r2, #3
 8100fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8100fcc:	43db      	mvns	r3, r3
 8100fce:	69ba      	ldr	r2, [r7, #24]
 8100fd0:	4013      	ands	r3, r2
 8100fd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100fd4:	683b      	ldr	r3, [r7, #0]
 8100fd6:	68da      	ldr	r2, [r3, #12]
 8100fd8:	69fb      	ldr	r3, [r7, #28]
 8100fda:	005b      	lsls	r3, r3, #1
 8100fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8100fe0:	69ba      	ldr	r2, [r7, #24]
 8100fe2:	4313      	orrs	r3, r2
 8100fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	69ba      	ldr	r2, [r7, #24]
 8100fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	685b      	ldr	r3, [r3, #4]
 8100ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100ff2:	2201      	movs	r2, #1
 8100ff4:	69fb      	ldr	r3, [r7, #28]
 8100ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8100ffa:	43db      	mvns	r3, r3
 8100ffc:	69ba      	ldr	r2, [r7, #24]
 8100ffe:	4013      	ands	r3, r2
 8101000:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101002:	683b      	ldr	r3, [r7, #0]
 8101004:	685b      	ldr	r3, [r3, #4]
 8101006:	091b      	lsrs	r3, r3, #4
 8101008:	f003 0201 	and.w	r2, r3, #1
 810100c:	69fb      	ldr	r3, [r7, #28]
 810100e:	fa02 f303 	lsl.w	r3, r2, r3
 8101012:	69ba      	ldr	r2, [r7, #24]
 8101014:	4313      	orrs	r3, r2
 8101016:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101018:	687b      	ldr	r3, [r7, #4]
 810101a:	69ba      	ldr	r2, [r7, #24]
 810101c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810101e:	687b      	ldr	r3, [r7, #4]
 8101020:	68db      	ldr	r3, [r3, #12]
 8101022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101024:	69fb      	ldr	r3, [r7, #28]
 8101026:	005b      	lsls	r3, r3, #1
 8101028:	2203      	movs	r2, #3
 810102a:	fa02 f303 	lsl.w	r3, r2, r3
 810102e:	43db      	mvns	r3, r3
 8101030:	69ba      	ldr	r2, [r7, #24]
 8101032:	4013      	ands	r3, r2
 8101034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101036:	683b      	ldr	r3, [r7, #0]
 8101038:	689a      	ldr	r2, [r3, #8]
 810103a:	69fb      	ldr	r3, [r7, #28]
 810103c:	005b      	lsls	r3, r3, #1
 810103e:	fa02 f303 	lsl.w	r3, r2, r3
 8101042:	69ba      	ldr	r2, [r7, #24]
 8101044:	4313      	orrs	r3, r2
 8101046:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101048:	687b      	ldr	r3, [r7, #4]
 810104a:	69ba      	ldr	r2, [r7, #24]
 810104c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810104e:	683b      	ldr	r3, [r7, #0]
 8101050:	685b      	ldr	r3, [r3, #4]
 8101052:	2b02      	cmp	r3, #2
 8101054:	d003      	beq.n	810105e <HAL_GPIO_Init+0xee>
 8101056:	683b      	ldr	r3, [r7, #0]
 8101058:	685b      	ldr	r3, [r3, #4]
 810105a:	2b12      	cmp	r3, #18
 810105c:	d123      	bne.n	81010a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810105e:	69fb      	ldr	r3, [r7, #28]
 8101060:	08da      	lsrs	r2, r3, #3
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	3208      	adds	r2, #8
 8101066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810106c:	69fb      	ldr	r3, [r7, #28]
 810106e:	f003 0307 	and.w	r3, r3, #7
 8101072:	009b      	lsls	r3, r3, #2
 8101074:	220f      	movs	r2, #15
 8101076:	fa02 f303 	lsl.w	r3, r2, r3
 810107a:	43db      	mvns	r3, r3
 810107c:	69ba      	ldr	r2, [r7, #24]
 810107e:	4013      	ands	r3, r2
 8101080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101082:	683b      	ldr	r3, [r7, #0]
 8101084:	691a      	ldr	r2, [r3, #16]
 8101086:	69fb      	ldr	r3, [r7, #28]
 8101088:	f003 0307 	and.w	r3, r3, #7
 810108c:	009b      	lsls	r3, r3, #2
 810108e:	fa02 f303 	lsl.w	r3, r2, r3
 8101092:	69ba      	ldr	r2, [r7, #24]
 8101094:	4313      	orrs	r3, r2
 8101096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101098:	69fb      	ldr	r3, [r7, #28]
 810109a:	08da      	lsrs	r2, r3, #3
 810109c:	687b      	ldr	r3, [r7, #4]
 810109e:	3208      	adds	r2, #8
 81010a0:	69b9      	ldr	r1, [r7, #24]
 81010a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81010a6:	687b      	ldr	r3, [r7, #4]
 81010a8:	681b      	ldr	r3, [r3, #0]
 81010aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81010ac:	69fb      	ldr	r3, [r7, #28]
 81010ae:	005b      	lsls	r3, r3, #1
 81010b0:	2203      	movs	r2, #3
 81010b2:	fa02 f303 	lsl.w	r3, r2, r3
 81010b6:	43db      	mvns	r3, r3
 81010b8:	69ba      	ldr	r2, [r7, #24]
 81010ba:	4013      	ands	r3, r2
 81010bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81010be:	683b      	ldr	r3, [r7, #0]
 81010c0:	685b      	ldr	r3, [r3, #4]
 81010c2:	f003 0203 	and.w	r2, r3, #3
 81010c6:	69fb      	ldr	r3, [r7, #28]
 81010c8:	005b      	lsls	r3, r3, #1
 81010ca:	fa02 f303 	lsl.w	r3, r2, r3
 81010ce:	69ba      	ldr	r2, [r7, #24]
 81010d0:	4313      	orrs	r3, r2
 81010d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81010d4:	687b      	ldr	r3, [r7, #4]
 81010d6:	69ba      	ldr	r2, [r7, #24]
 81010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81010da:	683b      	ldr	r3, [r7, #0]
 81010dc:	685b      	ldr	r3, [r3, #4]
 81010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81010e2:	2b00      	cmp	r3, #0
 81010e4:	f000 80e0 	beq.w	81012a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81010e8:	4b2f      	ldr	r3, [pc, #188]	; (81011a8 <HAL_GPIO_Init+0x238>)
 81010ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010ee:	4a2e      	ldr	r2, [pc, #184]	; (81011a8 <HAL_GPIO_Init+0x238>)
 81010f0:	f043 0302 	orr.w	r3, r3, #2
 81010f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81010f8:	4b2b      	ldr	r3, [pc, #172]	; (81011a8 <HAL_GPIO_Init+0x238>)
 81010fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010fe:	f003 0302 	and.w	r3, r3, #2
 8101102:	60fb      	str	r3, [r7, #12]
 8101104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101106:	4a29      	ldr	r2, [pc, #164]	; (81011ac <HAL_GPIO_Init+0x23c>)
 8101108:	69fb      	ldr	r3, [r7, #28]
 810110a:	089b      	lsrs	r3, r3, #2
 810110c:	3302      	adds	r3, #2
 810110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101114:	69fb      	ldr	r3, [r7, #28]
 8101116:	f003 0303 	and.w	r3, r3, #3
 810111a:	009b      	lsls	r3, r3, #2
 810111c:	220f      	movs	r2, #15
 810111e:	fa02 f303 	lsl.w	r3, r2, r3
 8101122:	43db      	mvns	r3, r3
 8101124:	69ba      	ldr	r2, [r7, #24]
 8101126:	4013      	ands	r3, r2
 8101128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	4a20      	ldr	r2, [pc, #128]	; (81011b0 <HAL_GPIO_Init+0x240>)
 810112e:	4293      	cmp	r3, r2
 8101130:	d052      	beq.n	81011d8 <HAL_GPIO_Init+0x268>
 8101132:	687b      	ldr	r3, [r7, #4]
 8101134:	4a1f      	ldr	r2, [pc, #124]	; (81011b4 <HAL_GPIO_Init+0x244>)
 8101136:	4293      	cmp	r3, r2
 8101138:	d031      	beq.n	810119e <HAL_GPIO_Init+0x22e>
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	4a1e      	ldr	r2, [pc, #120]	; (81011b8 <HAL_GPIO_Init+0x248>)
 810113e:	4293      	cmp	r3, r2
 8101140:	d02b      	beq.n	810119a <HAL_GPIO_Init+0x22a>
 8101142:	687b      	ldr	r3, [r7, #4]
 8101144:	4a1d      	ldr	r2, [pc, #116]	; (81011bc <HAL_GPIO_Init+0x24c>)
 8101146:	4293      	cmp	r3, r2
 8101148:	d025      	beq.n	8101196 <HAL_GPIO_Init+0x226>
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	4a1c      	ldr	r2, [pc, #112]	; (81011c0 <HAL_GPIO_Init+0x250>)
 810114e:	4293      	cmp	r3, r2
 8101150:	d01f      	beq.n	8101192 <HAL_GPIO_Init+0x222>
 8101152:	687b      	ldr	r3, [r7, #4]
 8101154:	4a1b      	ldr	r2, [pc, #108]	; (81011c4 <HAL_GPIO_Init+0x254>)
 8101156:	4293      	cmp	r3, r2
 8101158:	d019      	beq.n	810118e <HAL_GPIO_Init+0x21e>
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	4a1a      	ldr	r2, [pc, #104]	; (81011c8 <HAL_GPIO_Init+0x258>)
 810115e:	4293      	cmp	r3, r2
 8101160:	d013      	beq.n	810118a <HAL_GPIO_Init+0x21a>
 8101162:	687b      	ldr	r3, [r7, #4]
 8101164:	4a19      	ldr	r2, [pc, #100]	; (81011cc <HAL_GPIO_Init+0x25c>)
 8101166:	4293      	cmp	r3, r2
 8101168:	d00d      	beq.n	8101186 <HAL_GPIO_Init+0x216>
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	4a18      	ldr	r2, [pc, #96]	; (81011d0 <HAL_GPIO_Init+0x260>)
 810116e:	4293      	cmp	r3, r2
 8101170:	d007      	beq.n	8101182 <HAL_GPIO_Init+0x212>
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	4a17      	ldr	r2, [pc, #92]	; (81011d4 <HAL_GPIO_Init+0x264>)
 8101176:	4293      	cmp	r3, r2
 8101178:	d101      	bne.n	810117e <HAL_GPIO_Init+0x20e>
 810117a:	2309      	movs	r3, #9
 810117c:	e02d      	b.n	81011da <HAL_GPIO_Init+0x26a>
 810117e:	230a      	movs	r3, #10
 8101180:	e02b      	b.n	81011da <HAL_GPIO_Init+0x26a>
 8101182:	2308      	movs	r3, #8
 8101184:	e029      	b.n	81011da <HAL_GPIO_Init+0x26a>
 8101186:	2307      	movs	r3, #7
 8101188:	e027      	b.n	81011da <HAL_GPIO_Init+0x26a>
 810118a:	2306      	movs	r3, #6
 810118c:	e025      	b.n	81011da <HAL_GPIO_Init+0x26a>
 810118e:	2305      	movs	r3, #5
 8101190:	e023      	b.n	81011da <HAL_GPIO_Init+0x26a>
 8101192:	2304      	movs	r3, #4
 8101194:	e021      	b.n	81011da <HAL_GPIO_Init+0x26a>
 8101196:	2303      	movs	r3, #3
 8101198:	e01f      	b.n	81011da <HAL_GPIO_Init+0x26a>
 810119a:	2302      	movs	r3, #2
 810119c:	e01d      	b.n	81011da <HAL_GPIO_Init+0x26a>
 810119e:	2301      	movs	r3, #1
 81011a0:	e01b      	b.n	81011da <HAL_GPIO_Init+0x26a>
 81011a2:	bf00      	nop
 81011a4:	580000c0 	.word	0x580000c0
 81011a8:	58024400 	.word	0x58024400
 81011ac:	58000400 	.word	0x58000400
 81011b0:	58020000 	.word	0x58020000
 81011b4:	58020400 	.word	0x58020400
 81011b8:	58020800 	.word	0x58020800
 81011bc:	58020c00 	.word	0x58020c00
 81011c0:	58021000 	.word	0x58021000
 81011c4:	58021400 	.word	0x58021400
 81011c8:	58021800 	.word	0x58021800
 81011cc:	58021c00 	.word	0x58021c00
 81011d0:	58022000 	.word	0x58022000
 81011d4:	58022400 	.word	0x58022400
 81011d8:	2300      	movs	r3, #0
 81011da:	69fa      	ldr	r2, [r7, #28]
 81011dc:	f002 0203 	and.w	r2, r2, #3
 81011e0:	0092      	lsls	r2, r2, #2
 81011e2:	4093      	lsls	r3, r2
 81011e4:	69ba      	ldr	r2, [r7, #24]
 81011e6:	4313      	orrs	r3, r2
 81011e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81011ea:	4938      	ldr	r1, [pc, #224]	; (81012cc <HAL_GPIO_Init+0x35c>)
 81011ec:	69fb      	ldr	r3, [r7, #28]
 81011ee:	089b      	lsrs	r3, r3, #2
 81011f0:	3302      	adds	r3, #2
 81011f2:	69ba      	ldr	r2, [r7, #24]
 81011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81011f8:	697b      	ldr	r3, [r7, #20]
 81011fa:	681b      	ldr	r3, [r3, #0]
 81011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81011fe:	693b      	ldr	r3, [r7, #16]
 8101200:	43db      	mvns	r3, r3
 8101202:	69ba      	ldr	r2, [r7, #24]
 8101204:	4013      	ands	r3, r2
 8101206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101208:	683b      	ldr	r3, [r7, #0]
 810120a:	685b      	ldr	r3, [r3, #4]
 810120c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101210:	2b00      	cmp	r3, #0
 8101212:	d003      	beq.n	810121c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101214:	69ba      	ldr	r2, [r7, #24]
 8101216:	693b      	ldr	r3, [r7, #16]
 8101218:	4313      	orrs	r3, r2
 810121a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810121c:	697b      	ldr	r3, [r7, #20]
 810121e:	69ba      	ldr	r2, [r7, #24]
 8101220:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101222:	697b      	ldr	r3, [r7, #20]
 8101224:	685b      	ldr	r3, [r3, #4]
 8101226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101228:	693b      	ldr	r3, [r7, #16]
 810122a:	43db      	mvns	r3, r3
 810122c:	69ba      	ldr	r2, [r7, #24]
 810122e:	4013      	ands	r3, r2
 8101230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101232:	683b      	ldr	r3, [r7, #0]
 8101234:	685b      	ldr	r3, [r3, #4]
 8101236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810123a:	2b00      	cmp	r3, #0
 810123c:	d003      	beq.n	8101246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810123e:	69ba      	ldr	r2, [r7, #24]
 8101240:	693b      	ldr	r3, [r7, #16]
 8101242:	4313      	orrs	r3, r2
 8101244:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101246:	697b      	ldr	r3, [r7, #20]
 8101248:	69ba      	ldr	r2, [r7, #24]
 810124a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810124c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101250:	681b      	ldr	r3, [r3, #0]
 8101252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101254:	693b      	ldr	r3, [r7, #16]
 8101256:	43db      	mvns	r3, r3
 8101258:	69ba      	ldr	r2, [r7, #24]
 810125a:	4013      	ands	r3, r2
 810125c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810125e:	683b      	ldr	r3, [r7, #0]
 8101260:	685b      	ldr	r3, [r3, #4]
 8101262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101266:	2b00      	cmp	r3, #0
 8101268:	d003      	beq.n	8101272 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810126a:	69ba      	ldr	r2, [r7, #24]
 810126c:	693b      	ldr	r3, [r7, #16]
 810126e:	4313      	orrs	r3, r2
 8101270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101276:	69bb      	ldr	r3, [r7, #24]
 8101278:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810127e:	685b      	ldr	r3, [r3, #4]
 8101280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101282:	693b      	ldr	r3, [r7, #16]
 8101284:	43db      	mvns	r3, r3
 8101286:	69ba      	ldr	r2, [r7, #24]
 8101288:	4013      	ands	r3, r2
 810128a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810128c:	683b      	ldr	r3, [r7, #0]
 810128e:	685b      	ldr	r3, [r3, #4]
 8101290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101294:	2b00      	cmp	r3, #0
 8101296:	d003      	beq.n	81012a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101298:	69ba      	ldr	r2, [r7, #24]
 810129a:	693b      	ldr	r3, [r7, #16]
 810129c:	4313      	orrs	r3, r2
 810129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81012a4:	69bb      	ldr	r3, [r7, #24]
 81012a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81012a8:	69fb      	ldr	r3, [r7, #28]
 81012aa:	3301      	adds	r3, #1
 81012ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81012ae:	683b      	ldr	r3, [r7, #0]
 81012b0:	681a      	ldr	r2, [r3, #0]
 81012b2:	69fb      	ldr	r3, [r7, #28]
 81012b4:	fa22 f303 	lsr.w	r3, r2, r3
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	f47f ae63 	bne.w	8100f84 <HAL_GPIO_Init+0x14>
  }
}
 81012be:	bf00      	nop
 81012c0:	bf00      	nop
 81012c2:	3724      	adds	r7, #36	; 0x24
 81012c4:	46bd      	mov	sp, r7
 81012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ca:	4770      	bx	lr
 81012cc:	58000400 	.word	0x58000400

081012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81012d0:	b480      	push	{r7}
 81012d2:	b083      	sub	sp, #12
 81012d4:	af00      	add	r7, sp, #0
 81012d6:	6078      	str	r0, [r7, #4]
 81012d8:	460b      	mov	r3, r1
 81012da:	807b      	strh	r3, [r7, #2]
 81012dc:	4613      	mov	r3, r2
 81012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81012e0:	787b      	ldrb	r3, [r7, #1]
 81012e2:	2b00      	cmp	r3, #0
 81012e4:	d003      	beq.n	81012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81012e6:	887a      	ldrh	r2, [r7, #2]
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81012ec:	e003      	b.n	81012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81012ee:	887b      	ldrh	r3, [r7, #2]
 81012f0:	041a      	lsls	r2, r3, #16
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	619a      	str	r2, [r3, #24]
}
 81012f6:	bf00      	nop
 81012f8:	370c      	adds	r7, #12
 81012fa:	46bd      	mov	sp, r7
 81012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101300:	4770      	bx	lr
	...

08101304 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8101304:	b480      	push	{r7}
 8101306:	b083      	sub	sp, #12
 8101308:	af00      	add	r7, sp, #0
 810130a:	6078      	str	r0, [r7, #4]
 810130c:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 810130e:	490e      	ldr	r1, [pc, #56]	; (8101348 <HAL_HSEM_Take+0x44>)
 8101310:	683b      	ldr	r3, [r7, #0]
 8101312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8101316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810131a:	687a      	ldr	r2, [r7, #4]
 810131c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8101320:	4a09      	ldr	r2, [pc, #36]	; (8101348 <HAL_HSEM_Take+0x44>)
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8101328:	683b      	ldr	r3, [r7, #0]
 810132a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101332:	429a      	cmp	r2, r3
 8101334:	d101      	bne.n	810133a <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8101336:	2300      	movs	r3, #0
 8101338:	e000      	b.n	810133c <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810133a:	2301      	movs	r3, #1
}
 810133c:	4618      	mov	r0, r3
 810133e:	370c      	adds	r7, #12
 8101340:	46bd      	mov	sp, r7
 8101342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101346:	4770      	bx	lr
 8101348:	58026400 	.word	0x58026400

0810134c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810134c:	b480      	push	{r7}
 810134e:	b083      	sub	sp, #12
 8101350:	af00      	add	r7, sp, #0
 8101352:	6078      	str	r0, [r7, #4]
 8101354:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101356:	4906      	ldr	r1, [pc, #24]	; (8101370 <HAL_HSEM_Release+0x24>)
 8101358:	683b      	ldr	r3, [r7, #0]
 810135a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101364:	bf00      	nop
 8101366:	370c      	adds	r7, #12
 8101368:	46bd      	mov	sp, r7
 810136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136e:	4770      	bx	lr
 8101370:	58026400 	.word	0x58026400

08101374 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101374:	b480      	push	{r7}
 8101376:	b083      	sub	sp, #12
 8101378:	af00      	add	r7, sp, #0
 810137a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810137c:	4b05      	ldr	r3, [pc, #20]	; (8101394 <HAL_HSEM_ActivateNotification+0x20>)
 810137e:	681a      	ldr	r2, [r3, #0]
 8101380:	4904      	ldr	r1, [pc, #16]	; (8101394 <HAL_HSEM_ActivateNotification+0x20>)
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	4313      	orrs	r3, r2
 8101386:	600b      	str	r3, [r1, #0]
#endif
}
 8101388:	bf00      	nop
 810138a:	370c      	adds	r7, #12
 810138c:	46bd      	mov	sp, r7
 810138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101392:	4770      	bx	lr
 8101394:	58026510 	.word	0x58026510

08101398 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	b082      	sub	sp, #8
 810139c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810139e:	4b0a      	ldr	r3, [pc, #40]	; (81013c8 <HAL_HSEM_IRQHandler+0x30>)
 81013a0:	68db      	ldr	r3, [r3, #12]
 81013a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81013a4:	4b08      	ldr	r3, [pc, #32]	; (81013c8 <HAL_HSEM_IRQHandler+0x30>)
 81013a6:	681a      	ldr	r2, [r3, #0]
 81013a8:	687b      	ldr	r3, [r7, #4]
 81013aa:	43db      	mvns	r3, r3
 81013ac:	4906      	ldr	r1, [pc, #24]	; (81013c8 <HAL_HSEM_IRQHandler+0x30>)
 81013ae:	4013      	ands	r3, r2
 81013b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 81013b2:	4a05      	ldr	r2, [pc, #20]	; (81013c8 <HAL_HSEM_IRQHandler+0x30>)
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 81013b8:	6878      	ldr	r0, [r7, #4]
 81013ba:	f7ff fa8d 	bl	81008d8 <HAL_HSEM_FreeCallback>
}
 81013be:	bf00      	nop
 81013c0:	3708      	adds	r7, #8
 81013c2:	46bd      	mov	sp, r7
 81013c4:	bd80      	pop	{r7, pc}
 81013c6:	bf00      	nop
 81013c8:	58026510 	.word	0x58026510

081013cc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81013cc:	b580      	push	{r7, lr}
 81013ce:	b084      	sub	sp, #16
 81013d0:	af00      	add	r7, sp, #0
 81013d2:	60f8      	str	r0, [r7, #12]
 81013d4:	460b      	mov	r3, r1
 81013d6:	607a      	str	r2, [r7, #4]
 81013d8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81013da:	4b37      	ldr	r3, [pc, #220]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013dc:	681b      	ldr	r3, [r3, #0]
 81013de:	f023 0201 	bic.w	r2, r3, #1
 81013e2:	4935      	ldr	r1, [pc, #212]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013e4:	68fb      	ldr	r3, [r7, #12]
 81013e6:	4313      	orrs	r3, r2
 81013e8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	2b00      	cmp	r3, #0
 81013ee:	d123      	bne.n	8101438 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81013f0:	f7ff fdaa 	bl	8100f48 <HAL_GetCurrentCPUID>
 81013f4:	4603      	mov	r3, r0
 81013f6:	2b03      	cmp	r3, #3
 81013f8:	d158      	bne.n	81014ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81013fa:	4b2f      	ldr	r3, [pc, #188]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013fc:	691b      	ldr	r3, [r3, #16]
 81013fe:	4a2e      	ldr	r2, [pc, #184]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101400:	f023 0301 	bic.w	r3, r3, #1
 8101404:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101406:	4b2d      	ldr	r3, [pc, #180]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101408:	691b      	ldr	r3, [r3, #16]
 810140a:	4a2c      	ldr	r2, [pc, #176]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810140c:	f043 0304 	orr.w	r3, r3, #4
 8101410:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101412:	f3bf 8f4f 	dsb	sy
}
 8101416:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101418:	f3bf 8f6f 	isb	sy
}
 810141c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810141e:	7afb      	ldrb	r3, [r7, #11]
 8101420:	2b01      	cmp	r3, #1
 8101422:	d101      	bne.n	8101428 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101424:	bf30      	wfi
 8101426:	e000      	b.n	810142a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101428:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810142a:	4b24      	ldr	r3, [pc, #144]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810142c:	691b      	ldr	r3, [r3, #16]
 810142e:	4a23      	ldr	r2, [pc, #140]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101430:	f023 0304 	bic.w	r3, r3, #4
 8101434:	6113      	str	r3, [r2, #16]
 8101436:	e03c      	b.n	81014b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101438:	687b      	ldr	r3, [r7, #4]
 810143a:	2b01      	cmp	r3, #1
 810143c:	d123      	bne.n	8101486 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810143e:	f7ff fd83 	bl	8100f48 <HAL_GetCurrentCPUID>
 8101442:	4603      	mov	r3, r0
 8101444:	2b01      	cmp	r3, #1
 8101446:	d133      	bne.n	81014b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101448:	4b1b      	ldr	r3, [pc, #108]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810144a:	695b      	ldr	r3, [r3, #20]
 810144c:	4a1a      	ldr	r2, [pc, #104]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810144e:	f023 0302 	bic.w	r3, r3, #2
 8101452:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101454:	4b19      	ldr	r3, [pc, #100]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101456:	691b      	ldr	r3, [r3, #16]
 8101458:	4a18      	ldr	r2, [pc, #96]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810145a:	f043 0304 	orr.w	r3, r3, #4
 810145e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101460:	f3bf 8f4f 	dsb	sy
}
 8101464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101466:	f3bf 8f6f 	isb	sy
}
 810146a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810146c:	7afb      	ldrb	r3, [r7, #11]
 810146e:	2b01      	cmp	r3, #1
 8101470:	d101      	bne.n	8101476 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101472:	bf30      	wfi
 8101474:	e000      	b.n	8101478 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101476:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101478:	4b10      	ldr	r3, [pc, #64]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810147a:	691b      	ldr	r3, [r3, #16]
 810147c:	4a0f      	ldr	r2, [pc, #60]	; (81014bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810147e:	f023 0304 	bic.w	r3, r3, #4
 8101482:	6113      	str	r3, [r2, #16]
 8101484:	e015      	b.n	81014b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101486:	f7ff fd5f 	bl	8100f48 <HAL_GetCurrentCPUID>
 810148a:	4603      	mov	r3, r0
 810148c:	2b03      	cmp	r3, #3
 810148e:	d106      	bne.n	810149e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101490:	4b09      	ldr	r3, [pc, #36]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101492:	691b      	ldr	r3, [r3, #16]
 8101494:	4a08      	ldr	r2, [pc, #32]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101496:	f023 0304 	bic.w	r3, r3, #4
 810149a:	6113      	str	r3, [r2, #16]
 810149c:	e009      	b.n	81014b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810149e:	4b06      	ldr	r3, [pc, #24]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014a0:	695b      	ldr	r3, [r3, #20]
 81014a2:	4a05      	ldr	r2, [pc, #20]	; (81014b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81014a4:	f023 0304 	bic.w	r3, r3, #4
 81014a8:	6153      	str	r3, [r2, #20]
 81014aa:	e002      	b.n	81014b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81014ac:	bf00      	nop
 81014ae:	e000      	b.n	81014b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81014b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81014b2:	3710      	adds	r7, #16
 81014b4:	46bd      	mov	sp, r7
 81014b6:	bd80      	pop	{r7, pc}
 81014b8:	58024800 	.word	0x58024800
 81014bc:	e000ed00 	.word	0xe000ed00

081014c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81014c0:	b580      	push	{r7, lr}
 81014c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81014c4:	f7ff fd40 	bl	8100f48 <HAL_GetCurrentCPUID>
 81014c8:	4603      	mov	r3, r0
 81014ca:	2b03      	cmp	r3, #3
 81014cc:	d101      	bne.n	81014d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81014ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81014d0:	e001      	b.n	81014d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81014d2:	bf40      	sev
    __WFE ();
 81014d4:	bf20      	wfe
}
 81014d6:	bf00      	nop
 81014d8:	bd80      	pop	{r7, pc}
	...

081014dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81014dc:	b480      	push	{r7}
 81014de:	b089      	sub	sp, #36	; 0x24
 81014e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81014e2:	4bb3      	ldr	r3, [pc, #716]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014e4:	691b      	ldr	r3, [r3, #16]
 81014e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81014ea:	2b18      	cmp	r3, #24
 81014ec:	f200 8155 	bhi.w	810179a <HAL_RCC_GetSysClockFreq+0x2be>
 81014f0:	a201      	add	r2, pc, #4	; (adr r2, 81014f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81014f6:	bf00      	nop
 81014f8:	0810155d 	.word	0x0810155d
 81014fc:	0810179b 	.word	0x0810179b
 8101500:	0810179b 	.word	0x0810179b
 8101504:	0810179b 	.word	0x0810179b
 8101508:	0810179b 	.word	0x0810179b
 810150c:	0810179b 	.word	0x0810179b
 8101510:	0810179b 	.word	0x0810179b
 8101514:	0810179b 	.word	0x0810179b
 8101518:	08101583 	.word	0x08101583
 810151c:	0810179b 	.word	0x0810179b
 8101520:	0810179b 	.word	0x0810179b
 8101524:	0810179b 	.word	0x0810179b
 8101528:	0810179b 	.word	0x0810179b
 810152c:	0810179b 	.word	0x0810179b
 8101530:	0810179b 	.word	0x0810179b
 8101534:	0810179b 	.word	0x0810179b
 8101538:	08101589 	.word	0x08101589
 810153c:	0810179b 	.word	0x0810179b
 8101540:	0810179b 	.word	0x0810179b
 8101544:	0810179b 	.word	0x0810179b
 8101548:	0810179b 	.word	0x0810179b
 810154c:	0810179b 	.word	0x0810179b
 8101550:	0810179b 	.word	0x0810179b
 8101554:	0810179b 	.word	0x0810179b
 8101558:	0810158f 	.word	0x0810158f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810155c:	4b94      	ldr	r3, [pc, #592]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	f003 0320 	and.w	r3, r3, #32
 8101564:	2b00      	cmp	r3, #0
 8101566:	d009      	beq.n	810157c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101568:	4b91      	ldr	r3, [pc, #580]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810156a:	681b      	ldr	r3, [r3, #0]
 810156c:	08db      	lsrs	r3, r3, #3
 810156e:	f003 0303 	and.w	r3, r3, #3
 8101572:	4a90      	ldr	r2, [pc, #576]	; (81017b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101574:	fa22 f303 	lsr.w	r3, r2, r3
 8101578:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810157a:	e111      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810157c:	4b8d      	ldr	r3, [pc, #564]	; (81017b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810157e:	61bb      	str	r3, [r7, #24]
    break;
 8101580:	e10e      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101582:	4b8d      	ldr	r3, [pc, #564]	; (81017b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101584:	61bb      	str	r3, [r7, #24]
    break;
 8101586:	e10b      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101588:	4b8c      	ldr	r3, [pc, #560]	; (81017bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810158a:	61bb      	str	r3, [r7, #24]
    break;
 810158c:	e108      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810158e:	4b88      	ldr	r3, [pc, #544]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101592:	f003 0303 	and.w	r3, r3, #3
 8101596:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101598:	4b85      	ldr	r3, [pc, #532]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810159c:	091b      	lsrs	r3, r3, #4
 810159e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81015a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81015a4:	4b82      	ldr	r3, [pc, #520]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81015a8:	f003 0301 	and.w	r3, r3, #1
 81015ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81015ae:	4b80      	ldr	r3, [pc, #512]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81015b2:	08db      	lsrs	r3, r3, #3
 81015b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81015b8:	68fa      	ldr	r2, [r7, #12]
 81015ba:	fb02 f303 	mul.w	r3, r2, r3
 81015be:	ee07 3a90 	vmov	s15, r3
 81015c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81015ca:	693b      	ldr	r3, [r7, #16]
 81015cc:	2b00      	cmp	r3, #0
 81015ce:	f000 80e1 	beq.w	8101794 <HAL_RCC_GetSysClockFreq+0x2b8>
 81015d2:	697b      	ldr	r3, [r7, #20]
 81015d4:	2b02      	cmp	r3, #2
 81015d6:	f000 8083 	beq.w	81016e0 <HAL_RCC_GetSysClockFreq+0x204>
 81015da:	697b      	ldr	r3, [r7, #20]
 81015dc:	2b02      	cmp	r3, #2
 81015de:	f200 80a1 	bhi.w	8101724 <HAL_RCC_GetSysClockFreq+0x248>
 81015e2:	697b      	ldr	r3, [r7, #20]
 81015e4:	2b00      	cmp	r3, #0
 81015e6:	d003      	beq.n	81015f0 <HAL_RCC_GetSysClockFreq+0x114>
 81015e8:	697b      	ldr	r3, [r7, #20]
 81015ea:	2b01      	cmp	r3, #1
 81015ec:	d056      	beq.n	810169c <HAL_RCC_GetSysClockFreq+0x1c0>
 81015ee:	e099      	b.n	8101724 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81015f0:	4b6f      	ldr	r3, [pc, #444]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	f003 0320 	and.w	r3, r3, #32
 81015f8:	2b00      	cmp	r3, #0
 81015fa:	d02d      	beq.n	8101658 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81015fc:	4b6c      	ldr	r3, [pc, #432]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015fe:	681b      	ldr	r3, [r3, #0]
 8101600:	08db      	lsrs	r3, r3, #3
 8101602:	f003 0303 	and.w	r3, r3, #3
 8101606:	4a6b      	ldr	r2, [pc, #428]	; (81017b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101608:	fa22 f303 	lsr.w	r3, r2, r3
 810160c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	ee07 3a90 	vmov	s15, r3
 8101614:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101618:	693b      	ldr	r3, [r7, #16]
 810161a:	ee07 3a90 	vmov	s15, r3
 810161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101626:	4b62      	ldr	r3, [pc, #392]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810162e:	ee07 3a90 	vmov	s15, r3
 8101632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101636:	ed97 6a02 	vldr	s12, [r7, #8]
 810163a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81017c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810163e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810164a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810164e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101652:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101656:	e087      	b.n	8101768 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101658:	693b      	ldr	r3, [r7, #16]
 810165a:	ee07 3a90 	vmov	s15, r3
 810165e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101662:	eddf 6a58 	vldr	s13, [pc, #352]	; 81017c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810166a:	4b51      	ldr	r3, [pc, #324]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810166e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101672:	ee07 3a90 	vmov	s15, r3
 8101676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810167a:	ed97 6a02 	vldr	s12, [r7, #8]
 810167e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81017c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810168a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810168e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101696:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810169a:	e065      	b.n	8101768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810169c:	693b      	ldr	r3, [r7, #16]
 810169e:	ee07 3a90 	vmov	s15, r3
 81016a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81017c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81016aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016ae:	4b40      	ldr	r3, [pc, #256]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81016b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016b6:	ee07 3a90 	vmov	s15, r3
 81016ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016be:	ed97 6a02 	vldr	s12, [r7, #8]
 81016c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81017c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81016c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81016ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81016ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81016d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81016de:	e043      	b.n	8101768 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81016e0:	693b      	ldr	r3, [r7, #16]
 81016e2:	ee07 3a90 	vmov	s15, r3
 81016e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 81017cc <HAL_RCC_GetSysClockFreq+0x2f0>
 81016ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016f2:	4b2f      	ldr	r3, [pc, #188]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81016f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016fa:	ee07 3a90 	vmov	s15, r3
 81016fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101702:	ed97 6a02 	vldr	s12, [r7, #8]
 8101706:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81017c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810170a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810170e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810171a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810171e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101722:	e021      	b.n	8101768 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101724:	693b      	ldr	r3, [r7, #16]
 8101726:	ee07 3a90 	vmov	s15, r3
 810172a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810172e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81017c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101736:	4b1e      	ldr	r3, [pc, #120]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810173a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810173e:	ee07 3a90 	vmov	s15, r3
 8101742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101746:	ed97 6a02 	vldr	s12, [r7, #8]
 810174a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81017c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810174e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810175a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101766:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101768:	4b11      	ldr	r3, [pc, #68]	; (81017b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810176c:	0a5b      	lsrs	r3, r3, #9
 810176e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101772:	3301      	adds	r3, #1
 8101774:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101776:	683b      	ldr	r3, [r7, #0]
 8101778:	ee07 3a90 	vmov	s15, r3
 810177c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101780:	edd7 6a07 	vldr	s13, [r7, #28]
 8101784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810178c:	ee17 3a90 	vmov	r3, s15
 8101790:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101792:	e005      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101794:	2300      	movs	r3, #0
 8101796:	61bb      	str	r3, [r7, #24]
    break;
 8101798:	e002      	b.n	81017a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810179a:	4b07      	ldr	r3, [pc, #28]	; (81017b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810179c:	61bb      	str	r3, [r7, #24]
    break;
 810179e:	bf00      	nop
  }

  return sysclockfreq;
 81017a0:	69bb      	ldr	r3, [r7, #24]
}
 81017a2:	4618      	mov	r0, r3
 81017a4:	3724      	adds	r7, #36	; 0x24
 81017a6:	46bd      	mov	sp, r7
 81017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ac:	4770      	bx	lr
 81017ae:	bf00      	nop
 81017b0:	58024400 	.word	0x58024400
 81017b4:	03d09000 	.word	0x03d09000
 81017b8:	003d0900 	.word	0x003d0900
 81017bc:	007a1200 	.word	0x007a1200
 81017c0:	46000000 	.word	0x46000000
 81017c4:	4c742400 	.word	0x4c742400
 81017c8:	4a742400 	.word	0x4a742400
 81017cc:	4af42400 	.word	0x4af42400

081017d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81017d0:	b580      	push	{r7, lr}
 81017d2:	b082      	sub	sp, #8
 81017d4:	af00      	add	r7, sp, #0
 81017d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81017d8:	687b      	ldr	r3, [r7, #4]
 81017da:	2b00      	cmp	r3, #0
 81017dc:	d101      	bne.n	81017e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81017de:	2301      	movs	r3, #1
 81017e0:	e049      	b.n	8101876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81017e2:	687b      	ldr	r3, [r7, #4]
 81017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81017e8:	b2db      	uxtb	r3, r3
 81017ea:	2b00      	cmp	r3, #0
 81017ec:	d106      	bne.n	81017fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	2200      	movs	r2, #0
 81017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81017f6:	6878      	ldr	r0, [r7, #4]
 81017f8:	f7ff f966 	bl	8100ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81017fc:	687b      	ldr	r3, [r7, #4]
 81017fe:	2202      	movs	r2, #2
 8101800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101804:	687b      	ldr	r3, [r7, #4]
 8101806:	681a      	ldr	r2, [r3, #0]
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	3304      	adds	r3, #4
 810180c:	4619      	mov	r1, r3
 810180e:	4610      	mov	r0, r2
 8101810:	f000 fbbc 	bl	8101f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	2201      	movs	r2, #1
 8101818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	2201      	movs	r2, #1
 8101820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101824:	687b      	ldr	r3, [r7, #4]
 8101826:	2201      	movs	r2, #1
 8101828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810182c:	687b      	ldr	r3, [r7, #4]
 810182e:	2201      	movs	r2, #1
 8101830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101834:	687b      	ldr	r3, [r7, #4]
 8101836:	2201      	movs	r2, #1
 8101838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	2201      	movs	r2, #1
 8101840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	2201      	movs	r2, #1
 8101848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810184c:	687b      	ldr	r3, [r7, #4]
 810184e:	2201      	movs	r2, #1
 8101850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	2201      	movs	r2, #1
 8101858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	2201      	movs	r2, #1
 8101860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	2201      	movs	r2, #1
 8101868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810186c:	687b      	ldr	r3, [r7, #4]
 810186e:	2201      	movs	r2, #1
 8101870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101874:	2300      	movs	r3, #0
}
 8101876:	4618      	mov	r0, r3
 8101878:	3708      	adds	r7, #8
 810187a:	46bd      	mov	sp, r7
 810187c:	bd80      	pop	{r7, pc}
	...

08101880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101880:	b480      	push	{r7}
 8101882:	b085      	sub	sp, #20
 8101884:	af00      	add	r7, sp, #0
 8101886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8101888:	687b      	ldr	r3, [r7, #4]
 810188a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810188e:	b2db      	uxtb	r3, r3
 8101890:	2b01      	cmp	r3, #1
 8101892:	d001      	beq.n	8101898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101894:	2301      	movs	r3, #1
 8101896:	e021      	b.n	81018dc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	2202      	movs	r2, #2
 810189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	681b      	ldr	r3, [r3, #0]
 81018a4:	68da      	ldr	r2, [r3, #12]
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	f042 0201 	orr.w	r2, r2, #1
 81018ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	689a      	ldr	r2, [r3, #8]
 81018b6:	4b0c      	ldr	r3, [pc, #48]	; (81018e8 <HAL_TIM_Base_Start_IT+0x68>)
 81018b8:	4013      	ands	r3, r2
 81018ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81018bc:	68fb      	ldr	r3, [r7, #12]
 81018be:	2b06      	cmp	r3, #6
 81018c0:	d00b      	beq.n	81018da <HAL_TIM_Base_Start_IT+0x5a>
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81018c8:	d007      	beq.n	81018da <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	681b      	ldr	r3, [r3, #0]
 81018ce:	681a      	ldr	r2, [r3, #0]
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	681b      	ldr	r3, [r3, #0]
 81018d4:	f042 0201 	orr.w	r2, r2, #1
 81018d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81018da:	2300      	movs	r3, #0
}
 81018dc:	4618      	mov	r0, r3
 81018de:	3714      	adds	r7, #20
 81018e0:	46bd      	mov	sp, r7
 81018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e6:	4770      	bx	lr
 81018e8:	00010007 	.word	0x00010007

081018ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 81018ec:	b580      	push	{r7, lr}
 81018ee:	b082      	sub	sp, #8
 81018f0:	af00      	add	r7, sp, #0
 81018f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d101      	bne.n	81018fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 81018fa:	2301      	movs	r3, #1
 81018fc:	e049      	b.n	8101992 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81018fe:	687b      	ldr	r3, [r7, #4]
 8101900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101904:	b2db      	uxtb	r3, r3
 8101906:	2b00      	cmp	r3, #0
 8101908:	d106      	bne.n	8101918 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	2200      	movs	r2, #0
 810190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8101912:	6878      	ldr	r0, [r7, #4]
 8101914:	f000 f841 	bl	810199a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	2202      	movs	r2, #2
 810191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101920:	687b      	ldr	r3, [r7, #4]
 8101922:	681a      	ldr	r2, [r3, #0]
 8101924:	687b      	ldr	r3, [r7, #4]
 8101926:	3304      	adds	r3, #4
 8101928:	4619      	mov	r1, r3
 810192a:	4610      	mov	r0, r2
 810192c:	f000 fb2e 	bl	8101f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	2201      	movs	r2, #1
 8101934:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	2201      	movs	r2, #1
 810193c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101940:	687b      	ldr	r3, [r7, #4]
 8101942:	2201      	movs	r2, #1
 8101944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	2201      	movs	r2, #1
 810194c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	2201      	movs	r2, #1
 8101954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	2201      	movs	r2, #1
 810195c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	2201      	movs	r2, #1
 8101964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	2201      	movs	r2, #1
 810196c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	2201      	movs	r2, #1
 8101974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101978:	687b      	ldr	r3, [r7, #4]
 810197a:	2201      	movs	r2, #1
 810197c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	2201      	movs	r2, #1
 8101984:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101988:	687b      	ldr	r3, [r7, #4]
 810198a:	2201      	movs	r2, #1
 810198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101990:	2300      	movs	r3, #0
}
 8101992:	4618      	mov	r0, r3
 8101994:	3708      	adds	r7, #8
 8101996:	46bd      	mov	sp, r7
 8101998:	bd80      	pop	{r7, pc}

0810199a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810199a:	b480      	push	{r7}
 810199c:	b083      	sub	sp, #12
 810199e:	af00      	add	r7, sp, #0
 81019a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 81019a2:	bf00      	nop
 81019a4:	370c      	adds	r7, #12
 81019a6:	46bd      	mov	sp, r7
 81019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ac:	4770      	bx	lr
	...

081019b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81019b0:	b580      	push	{r7, lr}
 81019b2:	b084      	sub	sp, #16
 81019b4:	af00      	add	r7, sp, #0
 81019b6:	6078      	str	r0, [r7, #4]
 81019b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 81019ba:	683b      	ldr	r3, [r7, #0]
 81019bc:	2b00      	cmp	r3, #0
 81019be:	d104      	bne.n	81019ca <HAL_TIM_IC_Start_IT+0x1a>
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81019c6:	b2db      	uxtb	r3, r3
 81019c8:	e023      	b.n	8101a12 <HAL_TIM_IC_Start_IT+0x62>
 81019ca:	683b      	ldr	r3, [r7, #0]
 81019cc:	2b04      	cmp	r3, #4
 81019ce:	d104      	bne.n	81019da <HAL_TIM_IC_Start_IT+0x2a>
 81019d0:	687b      	ldr	r3, [r7, #4]
 81019d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81019d6:	b2db      	uxtb	r3, r3
 81019d8:	e01b      	b.n	8101a12 <HAL_TIM_IC_Start_IT+0x62>
 81019da:	683b      	ldr	r3, [r7, #0]
 81019dc:	2b08      	cmp	r3, #8
 81019de:	d104      	bne.n	81019ea <HAL_TIM_IC_Start_IT+0x3a>
 81019e0:	687b      	ldr	r3, [r7, #4]
 81019e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81019e6:	b2db      	uxtb	r3, r3
 81019e8:	e013      	b.n	8101a12 <HAL_TIM_IC_Start_IT+0x62>
 81019ea:	683b      	ldr	r3, [r7, #0]
 81019ec:	2b0c      	cmp	r3, #12
 81019ee:	d104      	bne.n	81019fa <HAL_TIM_IC_Start_IT+0x4a>
 81019f0:	687b      	ldr	r3, [r7, #4]
 81019f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81019f6:	b2db      	uxtb	r3, r3
 81019f8:	e00b      	b.n	8101a12 <HAL_TIM_IC_Start_IT+0x62>
 81019fa:	683b      	ldr	r3, [r7, #0]
 81019fc:	2b10      	cmp	r3, #16
 81019fe:	d104      	bne.n	8101a0a <HAL_TIM_IC_Start_IT+0x5a>
 8101a00:	687b      	ldr	r3, [r7, #4]
 8101a02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8101a06:	b2db      	uxtb	r3, r3
 8101a08:	e003      	b.n	8101a12 <HAL_TIM_IC_Start_IT+0x62>
 8101a0a:	687b      	ldr	r3, [r7, #4]
 8101a0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8101a10:	b2db      	uxtb	r3, r3
 8101a12:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8101a14:	683b      	ldr	r3, [r7, #0]
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d104      	bne.n	8101a24 <HAL_TIM_IC_Start_IT+0x74>
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8101a20:	b2db      	uxtb	r3, r3
 8101a22:	e013      	b.n	8101a4c <HAL_TIM_IC_Start_IT+0x9c>
 8101a24:	683b      	ldr	r3, [r7, #0]
 8101a26:	2b04      	cmp	r3, #4
 8101a28:	d104      	bne.n	8101a34 <HAL_TIM_IC_Start_IT+0x84>
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8101a30:	b2db      	uxtb	r3, r3
 8101a32:	e00b      	b.n	8101a4c <HAL_TIM_IC_Start_IT+0x9c>
 8101a34:	683b      	ldr	r3, [r7, #0]
 8101a36:	2b08      	cmp	r3, #8
 8101a38:	d104      	bne.n	8101a44 <HAL_TIM_IC_Start_IT+0x94>
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8101a40:	b2db      	uxtb	r3, r3
 8101a42:	e003      	b.n	8101a4c <HAL_TIM_IC_Start_IT+0x9c>
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8101a4a:	b2db      	uxtb	r3, r3
 8101a4c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8101a4e:	7bfb      	ldrb	r3, [r7, #15]
 8101a50:	2b01      	cmp	r3, #1
 8101a52:	d102      	bne.n	8101a5a <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8101a54:	7bbb      	ldrb	r3, [r7, #14]
 8101a56:	2b01      	cmp	r3, #1
 8101a58:	d001      	beq.n	8101a5e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8101a5a:	2301      	movs	r3, #1
 8101a5c:	e0aa      	b.n	8101bb4 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8101a5e:	683b      	ldr	r3, [r7, #0]
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	d104      	bne.n	8101a6e <HAL_TIM_IC_Start_IT+0xbe>
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	2202      	movs	r2, #2
 8101a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101a6c:	e023      	b.n	8101ab6 <HAL_TIM_IC_Start_IT+0x106>
 8101a6e:	683b      	ldr	r3, [r7, #0]
 8101a70:	2b04      	cmp	r3, #4
 8101a72:	d104      	bne.n	8101a7e <HAL_TIM_IC_Start_IT+0xce>
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	2202      	movs	r2, #2
 8101a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101a7c:	e01b      	b.n	8101ab6 <HAL_TIM_IC_Start_IT+0x106>
 8101a7e:	683b      	ldr	r3, [r7, #0]
 8101a80:	2b08      	cmp	r3, #8
 8101a82:	d104      	bne.n	8101a8e <HAL_TIM_IC_Start_IT+0xde>
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	2202      	movs	r2, #2
 8101a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101a8c:	e013      	b.n	8101ab6 <HAL_TIM_IC_Start_IT+0x106>
 8101a8e:	683b      	ldr	r3, [r7, #0]
 8101a90:	2b0c      	cmp	r3, #12
 8101a92:	d104      	bne.n	8101a9e <HAL_TIM_IC_Start_IT+0xee>
 8101a94:	687b      	ldr	r3, [r7, #4]
 8101a96:	2202      	movs	r2, #2
 8101a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101a9c:	e00b      	b.n	8101ab6 <HAL_TIM_IC_Start_IT+0x106>
 8101a9e:	683b      	ldr	r3, [r7, #0]
 8101aa0:	2b10      	cmp	r3, #16
 8101aa2:	d104      	bne.n	8101aae <HAL_TIM_IC_Start_IT+0xfe>
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	2202      	movs	r2, #2
 8101aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8101aac:	e003      	b.n	8101ab6 <HAL_TIM_IC_Start_IT+0x106>
 8101aae:	687b      	ldr	r3, [r7, #4]
 8101ab0:	2202      	movs	r2, #2
 8101ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8101ab6:	683b      	ldr	r3, [r7, #0]
 8101ab8:	2b00      	cmp	r3, #0
 8101aba:	d104      	bne.n	8101ac6 <HAL_TIM_IC_Start_IT+0x116>
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	2202      	movs	r2, #2
 8101ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8101ac4:	e013      	b.n	8101aee <HAL_TIM_IC_Start_IT+0x13e>
 8101ac6:	683b      	ldr	r3, [r7, #0]
 8101ac8:	2b04      	cmp	r3, #4
 8101aca:	d104      	bne.n	8101ad6 <HAL_TIM_IC_Start_IT+0x126>
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	2202      	movs	r2, #2
 8101ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8101ad4:	e00b      	b.n	8101aee <HAL_TIM_IC_Start_IT+0x13e>
 8101ad6:	683b      	ldr	r3, [r7, #0]
 8101ad8:	2b08      	cmp	r3, #8
 8101ada:	d104      	bne.n	8101ae6 <HAL_TIM_IC_Start_IT+0x136>
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	2202      	movs	r2, #2
 8101ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8101ae4:	e003      	b.n	8101aee <HAL_TIM_IC_Start_IT+0x13e>
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	2202      	movs	r2, #2
 8101aea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8101aee:	683b      	ldr	r3, [r7, #0]
 8101af0:	2b0c      	cmp	r3, #12
 8101af2:	d841      	bhi.n	8101b78 <HAL_TIM_IC_Start_IT+0x1c8>
 8101af4:	a201      	add	r2, pc, #4	; (adr r2, 8101afc <HAL_TIM_IC_Start_IT+0x14c>)
 8101af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101afa:	bf00      	nop
 8101afc:	08101b31 	.word	0x08101b31
 8101b00:	08101b79 	.word	0x08101b79
 8101b04:	08101b79 	.word	0x08101b79
 8101b08:	08101b79 	.word	0x08101b79
 8101b0c:	08101b43 	.word	0x08101b43
 8101b10:	08101b79 	.word	0x08101b79
 8101b14:	08101b79 	.word	0x08101b79
 8101b18:	08101b79 	.word	0x08101b79
 8101b1c:	08101b55 	.word	0x08101b55
 8101b20:	08101b79 	.word	0x08101b79
 8101b24:	08101b79 	.word	0x08101b79
 8101b28:	08101b79 	.word	0x08101b79
 8101b2c:	08101b67 	.word	0x08101b67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	681b      	ldr	r3, [r3, #0]
 8101b34:	68da      	ldr	r2, [r3, #12]
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	681b      	ldr	r3, [r3, #0]
 8101b3a:	f042 0202 	orr.w	r2, r2, #2
 8101b3e:	60da      	str	r2, [r3, #12]
      break;
 8101b40:	e01b      	b.n	8101b7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	68da      	ldr	r2, [r3, #12]
 8101b48:	687b      	ldr	r3, [r7, #4]
 8101b4a:	681b      	ldr	r3, [r3, #0]
 8101b4c:	f042 0204 	orr.w	r2, r2, #4
 8101b50:	60da      	str	r2, [r3, #12]
      break;
 8101b52:	e012      	b.n	8101b7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	681b      	ldr	r3, [r3, #0]
 8101b58:	68da      	ldr	r2, [r3, #12]
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	681b      	ldr	r3, [r3, #0]
 8101b5e:	f042 0208 	orr.w	r2, r2, #8
 8101b62:	60da      	str	r2, [r3, #12]
      break;
 8101b64:	e009      	b.n	8101b7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	681b      	ldr	r3, [r3, #0]
 8101b6a:	68da      	ldr	r2, [r3, #12]
 8101b6c:	687b      	ldr	r3, [r7, #4]
 8101b6e:	681b      	ldr	r3, [r3, #0]
 8101b70:	f042 0210 	orr.w	r2, r2, #16
 8101b74:	60da      	str	r2, [r3, #12]
      break;
 8101b76:	e000      	b.n	8101b7a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8101b78:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	2201      	movs	r2, #1
 8101b80:	6839      	ldr	r1, [r7, #0]
 8101b82:	4618      	mov	r0, r3
 8101b84:	f000 fbc6 	bl	8102314 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	689a      	ldr	r2, [r3, #8]
 8101b8e:	4b0b      	ldr	r3, [pc, #44]	; (8101bbc <HAL_TIM_IC_Start_IT+0x20c>)
 8101b90:	4013      	ands	r3, r2
 8101b92:	60bb      	str	r3, [r7, #8]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101b94:	68bb      	ldr	r3, [r7, #8]
 8101b96:	2b06      	cmp	r3, #6
 8101b98:	d00b      	beq.n	8101bb2 <HAL_TIM_IC_Start_IT+0x202>
 8101b9a:	68bb      	ldr	r3, [r7, #8]
 8101b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101ba0:	d007      	beq.n	8101bb2 <HAL_TIM_IC_Start_IT+0x202>
  {
    __HAL_TIM_ENABLE(htim);
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	681a      	ldr	r2, [r3, #0]
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	f042 0201 	orr.w	r2, r2, #1
 8101bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8101bb2:	2300      	movs	r3, #0
}
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	3710      	adds	r7, #16
 8101bb8:	46bd      	mov	sp, r7
 8101bba:	bd80      	pop	{r7, pc}
 8101bbc:	00010007 	.word	0x00010007

08101bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101bc0:	b580      	push	{r7, lr}
 8101bc2:	b082      	sub	sp, #8
 8101bc4:	af00      	add	r7, sp, #0
 8101bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	681b      	ldr	r3, [r3, #0]
 8101bcc:	691b      	ldr	r3, [r3, #16]
 8101bce:	f003 0302 	and.w	r3, r3, #2
 8101bd2:	2b02      	cmp	r3, #2
 8101bd4:	d122      	bne.n	8101c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	68db      	ldr	r3, [r3, #12]
 8101bdc:	f003 0302 	and.w	r3, r3, #2
 8101be0:	2b02      	cmp	r3, #2
 8101be2:	d11b      	bne.n	8101c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	f06f 0202 	mvn.w	r2, #2
 8101bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	2201      	movs	r2, #1
 8101bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	699b      	ldr	r3, [r3, #24]
 8101bfa:	f003 0303 	and.w	r3, r3, #3
 8101bfe:	2b00      	cmp	r3, #0
 8101c00:	d003      	beq.n	8101c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101c02:	6878      	ldr	r0, [r7, #4]
 8101c04:	f000 f9a3 	bl	8101f4e <HAL_TIM_IC_CaptureCallback>
 8101c08:	e005      	b.n	8101c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8101c0a:	6878      	ldr	r0, [r7, #4]
 8101c0c:	f000 f995 	bl	8101f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101c10:	6878      	ldr	r0, [r7, #4]
 8101c12:	f000 f9a6 	bl	8101f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	2200      	movs	r2, #0
 8101c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	691b      	ldr	r3, [r3, #16]
 8101c22:	f003 0304 	and.w	r3, r3, #4
 8101c26:	2b04      	cmp	r3, #4
 8101c28:	d122      	bne.n	8101c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8101c2a:	687b      	ldr	r3, [r7, #4]
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	68db      	ldr	r3, [r3, #12]
 8101c30:	f003 0304 	and.w	r3, r3, #4
 8101c34:	2b04      	cmp	r3, #4
 8101c36:	d11b      	bne.n	8101c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	f06f 0204 	mvn.w	r2, #4
 8101c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	2202      	movs	r2, #2
 8101c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	699b      	ldr	r3, [r3, #24]
 8101c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101c52:	2b00      	cmp	r3, #0
 8101c54:	d003      	beq.n	8101c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101c56:	6878      	ldr	r0, [r7, #4]
 8101c58:	f000 f979 	bl	8101f4e <HAL_TIM_IC_CaptureCallback>
 8101c5c:	e005      	b.n	8101c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101c5e:	6878      	ldr	r0, [r7, #4]
 8101c60:	f000 f96b 	bl	8101f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101c64:	6878      	ldr	r0, [r7, #4]
 8101c66:	f000 f97c 	bl	8101f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	2200      	movs	r2, #0
 8101c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	681b      	ldr	r3, [r3, #0]
 8101c74:	691b      	ldr	r3, [r3, #16]
 8101c76:	f003 0308 	and.w	r3, r3, #8
 8101c7a:	2b08      	cmp	r3, #8
 8101c7c:	d122      	bne.n	8101cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	681b      	ldr	r3, [r3, #0]
 8101c82:	68db      	ldr	r3, [r3, #12]
 8101c84:	f003 0308 	and.w	r3, r3, #8
 8101c88:	2b08      	cmp	r3, #8
 8101c8a:	d11b      	bne.n	8101cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8101c8c:	687b      	ldr	r3, [r7, #4]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	f06f 0208 	mvn.w	r2, #8
 8101c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	2204      	movs	r2, #4
 8101c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	69db      	ldr	r3, [r3, #28]
 8101ca2:	f003 0303 	and.w	r3, r3, #3
 8101ca6:	2b00      	cmp	r3, #0
 8101ca8:	d003      	beq.n	8101cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101caa:	6878      	ldr	r0, [r7, #4]
 8101cac:	f000 f94f 	bl	8101f4e <HAL_TIM_IC_CaptureCallback>
 8101cb0:	e005      	b.n	8101cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101cb2:	6878      	ldr	r0, [r7, #4]
 8101cb4:	f000 f941 	bl	8101f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101cb8:	6878      	ldr	r0, [r7, #4]
 8101cba:	f000 f952 	bl	8101f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	2200      	movs	r2, #0
 8101cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8101cc4:	687b      	ldr	r3, [r7, #4]
 8101cc6:	681b      	ldr	r3, [r3, #0]
 8101cc8:	691b      	ldr	r3, [r3, #16]
 8101cca:	f003 0310 	and.w	r3, r3, #16
 8101cce:	2b10      	cmp	r3, #16
 8101cd0:	d122      	bne.n	8101d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8101cd2:	687b      	ldr	r3, [r7, #4]
 8101cd4:	681b      	ldr	r3, [r3, #0]
 8101cd6:	68db      	ldr	r3, [r3, #12]
 8101cd8:	f003 0310 	and.w	r3, r3, #16
 8101cdc:	2b10      	cmp	r3, #16
 8101cde:	d11b      	bne.n	8101d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8101ce0:	687b      	ldr	r3, [r7, #4]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	f06f 0210 	mvn.w	r2, #16
 8101ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	2208      	movs	r2, #8
 8101cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	69db      	ldr	r3, [r3, #28]
 8101cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101cfa:	2b00      	cmp	r3, #0
 8101cfc:	d003      	beq.n	8101d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101cfe:	6878      	ldr	r0, [r7, #4]
 8101d00:	f000 f925 	bl	8101f4e <HAL_TIM_IC_CaptureCallback>
 8101d04:	e005      	b.n	8101d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101d06:	6878      	ldr	r0, [r7, #4]
 8101d08:	f000 f917 	bl	8101f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101d0c:	6878      	ldr	r0, [r7, #4]
 8101d0e:	f000 f928 	bl	8101f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	2200      	movs	r2, #0
 8101d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	691b      	ldr	r3, [r3, #16]
 8101d1e:	f003 0301 	and.w	r3, r3, #1
 8101d22:	2b01      	cmp	r3, #1
 8101d24:	d10e      	bne.n	8101d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	68db      	ldr	r3, [r3, #12]
 8101d2c:	f003 0301 	and.w	r3, r3, #1
 8101d30:	2b01      	cmp	r3, #1
 8101d32:	d107      	bne.n	8101d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	681b      	ldr	r3, [r3, #0]
 8101d38:	f06f 0201 	mvn.w	r2, #1
 8101d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8101d3e:	6878      	ldr	r0, [r7, #4]
 8101d40:	f000 f8f1 	bl	8101f26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101d44:	687b      	ldr	r3, [r7, #4]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	691b      	ldr	r3, [r3, #16]
 8101d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101d4e:	2b80      	cmp	r3, #128	; 0x80
 8101d50:	d10e      	bne.n	8101d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	68db      	ldr	r3, [r3, #12]
 8101d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101d5c:	2b80      	cmp	r3, #128	; 0x80
 8101d5e:	d107      	bne.n	8101d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8101d60:	687b      	ldr	r3, [r7, #4]
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8101d6a:	6878      	ldr	r0, [r7, #4]
 8101d6c:	f000 fb01 	bl	8102372 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	691b      	ldr	r3, [r3, #16]
 8101d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101d7e:	d10e      	bne.n	8101d9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	681b      	ldr	r3, [r3, #0]
 8101d84:	68db      	ldr	r3, [r3, #12]
 8101d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101d8a:	2b80      	cmp	r3, #128	; 0x80
 8101d8c:	d107      	bne.n	8101d9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8101d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8101d98:	6878      	ldr	r0, [r7, #4]
 8101d9a:	f000 faf4 	bl	8102386 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	691b      	ldr	r3, [r3, #16]
 8101da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101da8:	2b40      	cmp	r3, #64	; 0x40
 8101daa:	d10e      	bne.n	8101dca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	68db      	ldr	r3, [r3, #12]
 8101db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101db6:	2b40      	cmp	r3, #64	; 0x40
 8101db8:	d107      	bne.n	8101dca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	681b      	ldr	r3, [r3, #0]
 8101dbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8101dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8101dc4:	6878      	ldr	r0, [r7, #4]
 8101dc6:	f000 f8d6 	bl	8101f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	681b      	ldr	r3, [r3, #0]
 8101dce:	691b      	ldr	r3, [r3, #16]
 8101dd0:	f003 0320 	and.w	r3, r3, #32
 8101dd4:	2b20      	cmp	r3, #32
 8101dd6:	d10e      	bne.n	8101df6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	68db      	ldr	r3, [r3, #12]
 8101dde:	f003 0320 	and.w	r3, r3, #32
 8101de2:	2b20      	cmp	r3, #32
 8101de4:	d107      	bne.n	8101df6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	681b      	ldr	r3, [r3, #0]
 8101dea:	f06f 0220 	mvn.w	r2, #32
 8101dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101df0:	6878      	ldr	r0, [r7, #4]
 8101df2:	f000 fab4 	bl	810235e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101df6:	bf00      	nop
 8101df8:	3708      	adds	r7, #8
 8101dfa:	46bd      	mov	sp, r7
 8101dfc:	bd80      	pop	{r7, pc}

08101dfe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8101dfe:	b580      	push	{r7, lr}
 8101e00:	b084      	sub	sp, #16
 8101e02:	af00      	add	r7, sp, #0
 8101e04:	60f8      	str	r0, [r7, #12]
 8101e06:	60b9      	str	r1, [r7, #8]
 8101e08:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8101e0a:	68fb      	ldr	r3, [r7, #12]
 8101e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8101e10:	2b01      	cmp	r3, #1
 8101e12:	d101      	bne.n	8101e18 <HAL_TIM_IC_ConfigChannel+0x1a>
 8101e14:	2302      	movs	r3, #2
 8101e16:	e082      	b.n	8101f1e <HAL_TIM_IC_ConfigChannel+0x120>
 8101e18:	68fb      	ldr	r3, [r7, #12]
 8101e1a:	2201      	movs	r2, #1
 8101e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8101e20:	687b      	ldr	r3, [r7, #4]
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d11b      	bne.n	8101e5e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8101e26:	68fb      	ldr	r3, [r7, #12]
 8101e28:	6818      	ldr	r0, [r3, #0]
 8101e2a:	68bb      	ldr	r3, [r7, #8]
 8101e2c:	6819      	ldr	r1, [r3, #0]
 8101e2e:	68bb      	ldr	r3, [r7, #8]
 8101e30:	685a      	ldr	r2, [r3, #4]
 8101e32:	68bb      	ldr	r3, [r7, #8]
 8101e34:	68db      	ldr	r3, [r3, #12]
 8101e36:	f000 f943 	bl	81020c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8101e3a:	68fb      	ldr	r3, [r7, #12]
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	699a      	ldr	r2, [r3, #24]
 8101e40:	68fb      	ldr	r3, [r7, #12]
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	f022 020c 	bic.w	r2, r2, #12
 8101e48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8101e4a:	68fb      	ldr	r3, [r7, #12]
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	6999      	ldr	r1, [r3, #24]
 8101e50:	68bb      	ldr	r3, [r7, #8]
 8101e52:	689a      	ldr	r2, [r3, #8]
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	681b      	ldr	r3, [r3, #0]
 8101e58:	430a      	orrs	r2, r1
 8101e5a:	619a      	str	r2, [r3, #24]
 8101e5c:	e05a      	b.n	8101f14 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	2b04      	cmp	r3, #4
 8101e62:	d11c      	bne.n	8101e9e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8101e64:	68fb      	ldr	r3, [r7, #12]
 8101e66:	6818      	ldr	r0, [r3, #0]
 8101e68:	68bb      	ldr	r3, [r7, #8]
 8101e6a:	6819      	ldr	r1, [r3, #0]
 8101e6c:	68bb      	ldr	r3, [r7, #8]
 8101e6e:	685a      	ldr	r2, [r3, #4]
 8101e70:	68bb      	ldr	r3, [r7, #8]
 8101e72:	68db      	ldr	r3, [r3, #12]
 8101e74:	f000 f998 	bl	81021a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8101e78:	68fb      	ldr	r3, [r7, #12]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	699a      	ldr	r2, [r3, #24]
 8101e7e:	68fb      	ldr	r3, [r7, #12]
 8101e80:	681b      	ldr	r3, [r3, #0]
 8101e82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8101e86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8101e88:	68fb      	ldr	r3, [r7, #12]
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	6999      	ldr	r1, [r3, #24]
 8101e8e:	68bb      	ldr	r3, [r7, #8]
 8101e90:	689b      	ldr	r3, [r3, #8]
 8101e92:	021a      	lsls	r2, r3, #8
 8101e94:	68fb      	ldr	r3, [r7, #12]
 8101e96:	681b      	ldr	r3, [r3, #0]
 8101e98:	430a      	orrs	r2, r1
 8101e9a:	619a      	str	r2, [r3, #24]
 8101e9c:	e03a      	b.n	8101f14 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8101e9e:	687b      	ldr	r3, [r7, #4]
 8101ea0:	2b08      	cmp	r3, #8
 8101ea2:	d11b      	bne.n	8101edc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8101ea4:	68fb      	ldr	r3, [r7, #12]
 8101ea6:	6818      	ldr	r0, [r3, #0]
 8101ea8:	68bb      	ldr	r3, [r7, #8]
 8101eaa:	6819      	ldr	r1, [r3, #0]
 8101eac:	68bb      	ldr	r3, [r7, #8]
 8101eae:	685a      	ldr	r2, [r3, #4]
 8101eb0:	68bb      	ldr	r3, [r7, #8]
 8101eb2:	68db      	ldr	r3, [r3, #12]
 8101eb4:	f000 f9b5 	bl	8102222 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8101eb8:	68fb      	ldr	r3, [r7, #12]
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	69da      	ldr	r2, [r3, #28]
 8101ebe:	68fb      	ldr	r3, [r7, #12]
 8101ec0:	681b      	ldr	r3, [r3, #0]
 8101ec2:	f022 020c 	bic.w	r2, r2, #12
 8101ec6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8101ec8:	68fb      	ldr	r3, [r7, #12]
 8101eca:	681b      	ldr	r3, [r3, #0]
 8101ecc:	69d9      	ldr	r1, [r3, #28]
 8101ece:	68bb      	ldr	r3, [r7, #8]
 8101ed0:	689a      	ldr	r2, [r3, #8]
 8101ed2:	68fb      	ldr	r3, [r7, #12]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	430a      	orrs	r2, r1
 8101ed8:	61da      	str	r2, [r3, #28]
 8101eda:	e01b      	b.n	8101f14 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8101edc:	68fb      	ldr	r3, [r7, #12]
 8101ede:	6818      	ldr	r0, [r3, #0]
 8101ee0:	68bb      	ldr	r3, [r7, #8]
 8101ee2:	6819      	ldr	r1, [r3, #0]
 8101ee4:	68bb      	ldr	r3, [r7, #8]
 8101ee6:	685a      	ldr	r2, [r3, #4]
 8101ee8:	68bb      	ldr	r3, [r7, #8]
 8101eea:	68db      	ldr	r3, [r3, #12]
 8101eec:	f000 f9d5 	bl	810229a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8101ef0:	68fb      	ldr	r3, [r7, #12]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	69da      	ldr	r2, [r3, #28]
 8101ef6:	68fb      	ldr	r3, [r7, #12]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8101efe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8101f00:	68fb      	ldr	r3, [r7, #12]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	69d9      	ldr	r1, [r3, #28]
 8101f06:	68bb      	ldr	r3, [r7, #8]
 8101f08:	689b      	ldr	r3, [r3, #8]
 8101f0a:	021a      	lsls	r2, r3, #8
 8101f0c:	68fb      	ldr	r3, [r7, #12]
 8101f0e:	681b      	ldr	r3, [r3, #0]
 8101f10:	430a      	orrs	r2, r1
 8101f12:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8101f14:	68fb      	ldr	r3, [r7, #12]
 8101f16:	2200      	movs	r2, #0
 8101f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8101f1c:	2300      	movs	r3, #0
}
 8101f1e:	4618      	mov	r0, r3
 8101f20:	3710      	adds	r7, #16
 8101f22:	46bd      	mov	sp, r7
 8101f24:	bd80      	pop	{r7, pc}

08101f26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101f26:	b480      	push	{r7}
 8101f28:	b083      	sub	sp, #12
 8101f2a:	af00      	add	r7, sp, #0
 8101f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8101f2e:	bf00      	nop
 8101f30:	370c      	adds	r7, #12
 8101f32:	46bd      	mov	sp, r7
 8101f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f38:	4770      	bx	lr

08101f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101f3a:	b480      	push	{r7}
 8101f3c:	b083      	sub	sp, #12
 8101f3e:	af00      	add	r7, sp, #0
 8101f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101f42:	bf00      	nop
 8101f44:	370c      	adds	r7, #12
 8101f46:	46bd      	mov	sp, r7
 8101f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f4c:	4770      	bx	lr

08101f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8101f4e:	b480      	push	{r7}
 8101f50:	b083      	sub	sp, #12
 8101f52:	af00      	add	r7, sp, #0
 8101f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8101f56:	bf00      	nop
 8101f58:	370c      	adds	r7, #12
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr

08101f62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101f62:	b480      	push	{r7}
 8101f64:	b083      	sub	sp, #12
 8101f66:	af00      	add	r7, sp, #0
 8101f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8101f6a:	bf00      	nop
 8101f6c:	370c      	adds	r7, #12
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f74:	4770      	bx	lr

08101f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8101f76:	b480      	push	{r7}
 8101f78:	b083      	sub	sp, #12
 8101f7a:	af00      	add	r7, sp, #0
 8101f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8101f7e:	bf00      	nop
 8101f80:	370c      	adds	r7, #12
 8101f82:	46bd      	mov	sp, r7
 8101f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f88:	4770      	bx	lr
	...

08101f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8101f8c:	b480      	push	{r7}
 8101f8e:	b085      	sub	sp, #20
 8101f90:	af00      	add	r7, sp, #0
 8101f92:	6078      	str	r0, [r7, #4]
 8101f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	681b      	ldr	r3, [r3, #0]
 8101f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101f9c:	687b      	ldr	r3, [r7, #4]
 8101f9e:	4a40      	ldr	r2, [pc, #256]	; (81020a0 <TIM_Base_SetConfig+0x114>)
 8101fa0:	4293      	cmp	r3, r2
 8101fa2:	d013      	beq.n	8101fcc <TIM_Base_SetConfig+0x40>
 8101fa4:	687b      	ldr	r3, [r7, #4]
 8101fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101faa:	d00f      	beq.n	8101fcc <TIM_Base_SetConfig+0x40>
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	4a3d      	ldr	r2, [pc, #244]	; (81020a4 <TIM_Base_SetConfig+0x118>)
 8101fb0:	4293      	cmp	r3, r2
 8101fb2:	d00b      	beq.n	8101fcc <TIM_Base_SetConfig+0x40>
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	4a3c      	ldr	r2, [pc, #240]	; (81020a8 <TIM_Base_SetConfig+0x11c>)
 8101fb8:	4293      	cmp	r3, r2
 8101fba:	d007      	beq.n	8101fcc <TIM_Base_SetConfig+0x40>
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	4a3b      	ldr	r2, [pc, #236]	; (81020ac <TIM_Base_SetConfig+0x120>)
 8101fc0:	4293      	cmp	r3, r2
 8101fc2:	d003      	beq.n	8101fcc <TIM_Base_SetConfig+0x40>
 8101fc4:	687b      	ldr	r3, [r7, #4]
 8101fc6:	4a3a      	ldr	r2, [pc, #232]	; (81020b0 <TIM_Base_SetConfig+0x124>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d108      	bne.n	8101fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8101fcc:	68fb      	ldr	r3, [r7, #12]
 8101fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8101fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8101fd4:	683b      	ldr	r3, [r7, #0]
 8101fd6:	685b      	ldr	r3, [r3, #4]
 8101fd8:	68fa      	ldr	r2, [r7, #12]
 8101fda:	4313      	orrs	r3, r2
 8101fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	4a2f      	ldr	r2, [pc, #188]	; (81020a0 <TIM_Base_SetConfig+0x114>)
 8101fe2:	4293      	cmp	r3, r2
 8101fe4:	d01f      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fec:	d01b      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	4a2c      	ldr	r2, [pc, #176]	; (81020a4 <TIM_Base_SetConfig+0x118>)
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	d017      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8101ff6:	687b      	ldr	r3, [r7, #4]
 8101ff8:	4a2b      	ldr	r2, [pc, #172]	; (81020a8 <TIM_Base_SetConfig+0x11c>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d013      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	4a2a      	ldr	r2, [pc, #168]	; (81020ac <TIM_Base_SetConfig+0x120>)
 8102002:	4293      	cmp	r3, r2
 8102004:	d00f      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	4a29      	ldr	r2, [pc, #164]	; (81020b0 <TIM_Base_SetConfig+0x124>)
 810200a:	4293      	cmp	r3, r2
 810200c:	d00b      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 810200e:	687b      	ldr	r3, [r7, #4]
 8102010:	4a28      	ldr	r2, [pc, #160]	; (81020b4 <TIM_Base_SetConfig+0x128>)
 8102012:	4293      	cmp	r3, r2
 8102014:	d007      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 8102016:	687b      	ldr	r3, [r7, #4]
 8102018:	4a27      	ldr	r2, [pc, #156]	; (81020b8 <TIM_Base_SetConfig+0x12c>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d003      	beq.n	8102026 <TIM_Base_SetConfig+0x9a>
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	4a26      	ldr	r2, [pc, #152]	; (81020bc <TIM_Base_SetConfig+0x130>)
 8102022:	4293      	cmp	r3, r2
 8102024:	d108      	bne.n	8102038 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102026:	68fb      	ldr	r3, [r7, #12]
 8102028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810202c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810202e:	683b      	ldr	r3, [r7, #0]
 8102030:	68db      	ldr	r3, [r3, #12]
 8102032:	68fa      	ldr	r2, [r7, #12]
 8102034:	4313      	orrs	r3, r2
 8102036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102038:	68fb      	ldr	r3, [r7, #12]
 810203a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810203e:	683b      	ldr	r3, [r7, #0]
 8102040:	695b      	ldr	r3, [r3, #20]
 8102042:	4313      	orrs	r3, r2
 8102044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102046:	687b      	ldr	r3, [r7, #4]
 8102048:	68fa      	ldr	r2, [r7, #12]
 810204a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810204c:	683b      	ldr	r3, [r7, #0]
 810204e:	689a      	ldr	r2, [r3, #8]
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102054:	683b      	ldr	r3, [r7, #0]
 8102056:	681a      	ldr	r2, [r3, #0]
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	4a10      	ldr	r2, [pc, #64]	; (81020a0 <TIM_Base_SetConfig+0x114>)
 8102060:	4293      	cmp	r3, r2
 8102062:	d00f      	beq.n	8102084 <TIM_Base_SetConfig+0xf8>
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	4a12      	ldr	r2, [pc, #72]	; (81020b0 <TIM_Base_SetConfig+0x124>)
 8102068:	4293      	cmp	r3, r2
 810206a:	d00b      	beq.n	8102084 <TIM_Base_SetConfig+0xf8>
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	4a11      	ldr	r2, [pc, #68]	; (81020b4 <TIM_Base_SetConfig+0x128>)
 8102070:	4293      	cmp	r3, r2
 8102072:	d007      	beq.n	8102084 <TIM_Base_SetConfig+0xf8>
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	4a10      	ldr	r2, [pc, #64]	; (81020b8 <TIM_Base_SetConfig+0x12c>)
 8102078:	4293      	cmp	r3, r2
 810207a:	d003      	beq.n	8102084 <TIM_Base_SetConfig+0xf8>
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	4a0f      	ldr	r2, [pc, #60]	; (81020bc <TIM_Base_SetConfig+0x130>)
 8102080:	4293      	cmp	r3, r2
 8102082:	d103      	bne.n	810208c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102084:	683b      	ldr	r3, [r7, #0]
 8102086:	691a      	ldr	r2, [r3, #16]
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810208c:	687b      	ldr	r3, [r7, #4]
 810208e:	2201      	movs	r2, #1
 8102090:	615a      	str	r2, [r3, #20]
}
 8102092:	bf00      	nop
 8102094:	3714      	adds	r7, #20
 8102096:	46bd      	mov	sp, r7
 8102098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810209c:	4770      	bx	lr
 810209e:	bf00      	nop
 81020a0:	40010000 	.word	0x40010000
 81020a4:	40000400 	.word	0x40000400
 81020a8:	40000800 	.word	0x40000800
 81020ac:	40000c00 	.word	0x40000c00
 81020b0:	40010400 	.word	0x40010400
 81020b4:	40014000 	.word	0x40014000
 81020b8:	40014400 	.word	0x40014400
 81020bc:	40014800 	.word	0x40014800

081020c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 81020c0:	b480      	push	{r7}
 81020c2:	b087      	sub	sp, #28
 81020c4:	af00      	add	r7, sp, #0
 81020c6:	60f8      	str	r0, [r7, #12]
 81020c8:	60b9      	str	r1, [r7, #8]
 81020ca:	607a      	str	r2, [r7, #4]
 81020cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81020ce:	68fb      	ldr	r3, [r7, #12]
 81020d0:	6a1b      	ldr	r3, [r3, #32]
 81020d2:	f023 0201 	bic.w	r2, r3, #1
 81020d6:	68fb      	ldr	r3, [r7, #12]
 81020d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81020da:	68fb      	ldr	r3, [r7, #12]
 81020dc:	699b      	ldr	r3, [r3, #24]
 81020de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81020e0:	68fb      	ldr	r3, [r7, #12]
 81020e2:	6a1b      	ldr	r3, [r3, #32]
 81020e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 81020e6:	68fb      	ldr	r3, [r7, #12]
 81020e8:	4a28      	ldr	r2, [pc, #160]	; (810218c <TIM_TI1_SetConfig+0xcc>)
 81020ea:	4293      	cmp	r3, r2
 81020ec:	d01b      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 81020ee:	68fb      	ldr	r3, [r7, #12]
 81020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81020f4:	d017      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 81020f6:	68fb      	ldr	r3, [r7, #12]
 81020f8:	4a25      	ldr	r2, [pc, #148]	; (8102190 <TIM_TI1_SetConfig+0xd0>)
 81020fa:	4293      	cmp	r3, r2
 81020fc:	d013      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 81020fe:	68fb      	ldr	r3, [r7, #12]
 8102100:	4a24      	ldr	r2, [pc, #144]	; (8102194 <TIM_TI1_SetConfig+0xd4>)
 8102102:	4293      	cmp	r3, r2
 8102104:	d00f      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 8102106:	68fb      	ldr	r3, [r7, #12]
 8102108:	4a23      	ldr	r2, [pc, #140]	; (8102198 <TIM_TI1_SetConfig+0xd8>)
 810210a:	4293      	cmp	r3, r2
 810210c:	d00b      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 810210e:	68fb      	ldr	r3, [r7, #12]
 8102110:	4a22      	ldr	r2, [pc, #136]	; (810219c <TIM_TI1_SetConfig+0xdc>)
 8102112:	4293      	cmp	r3, r2
 8102114:	d007      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 8102116:	68fb      	ldr	r3, [r7, #12]
 8102118:	4a21      	ldr	r2, [pc, #132]	; (81021a0 <TIM_TI1_SetConfig+0xe0>)
 810211a:	4293      	cmp	r3, r2
 810211c:	d003      	beq.n	8102126 <TIM_TI1_SetConfig+0x66>
 810211e:	68fb      	ldr	r3, [r7, #12]
 8102120:	4a20      	ldr	r2, [pc, #128]	; (81021a4 <TIM_TI1_SetConfig+0xe4>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d101      	bne.n	810212a <TIM_TI1_SetConfig+0x6a>
 8102126:	2301      	movs	r3, #1
 8102128:	e000      	b.n	810212c <TIM_TI1_SetConfig+0x6c>
 810212a:	2300      	movs	r3, #0
 810212c:	2b00      	cmp	r3, #0
 810212e:	d008      	beq.n	8102142 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8102130:	697b      	ldr	r3, [r7, #20]
 8102132:	f023 0303 	bic.w	r3, r3, #3
 8102136:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8102138:	697a      	ldr	r2, [r7, #20]
 810213a:	687b      	ldr	r3, [r7, #4]
 810213c:	4313      	orrs	r3, r2
 810213e:	617b      	str	r3, [r7, #20]
 8102140:	e003      	b.n	810214a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8102142:	697b      	ldr	r3, [r7, #20]
 8102144:	f043 0301 	orr.w	r3, r3, #1
 8102148:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810214a:	697b      	ldr	r3, [r7, #20]
 810214c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8102152:	683b      	ldr	r3, [r7, #0]
 8102154:	011b      	lsls	r3, r3, #4
 8102156:	b2db      	uxtb	r3, r3
 8102158:	697a      	ldr	r2, [r7, #20]
 810215a:	4313      	orrs	r3, r2
 810215c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810215e:	693b      	ldr	r3, [r7, #16]
 8102160:	f023 030a 	bic.w	r3, r3, #10
 8102164:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8102166:	68bb      	ldr	r3, [r7, #8]
 8102168:	f003 030a 	and.w	r3, r3, #10
 810216c:	693a      	ldr	r2, [r7, #16]
 810216e:	4313      	orrs	r3, r2
 8102170:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8102172:	68fb      	ldr	r3, [r7, #12]
 8102174:	697a      	ldr	r2, [r7, #20]
 8102176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102178:	68fb      	ldr	r3, [r7, #12]
 810217a:	693a      	ldr	r2, [r7, #16]
 810217c:	621a      	str	r2, [r3, #32]
}
 810217e:	bf00      	nop
 8102180:	371c      	adds	r7, #28
 8102182:	46bd      	mov	sp, r7
 8102184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102188:	4770      	bx	lr
 810218a:	bf00      	nop
 810218c:	40010000 	.word	0x40010000
 8102190:	40000400 	.word	0x40000400
 8102194:	40000800 	.word	0x40000800
 8102198:	40000c00 	.word	0x40000c00
 810219c:	40010400 	.word	0x40010400
 81021a0:	40001800 	.word	0x40001800
 81021a4:	40014000 	.word	0x40014000

081021a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81021a8:	b480      	push	{r7}
 81021aa:	b087      	sub	sp, #28
 81021ac:	af00      	add	r7, sp, #0
 81021ae:	60f8      	str	r0, [r7, #12]
 81021b0:	60b9      	str	r1, [r7, #8]
 81021b2:	607a      	str	r2, [r7, #4]
 81021b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81021b6:	68fb      	ldr	r3, [r7, #12]
 81021b8:	6a1b      	ldr	r3, [r3, #32]
 81021ba:	f023 0210 	bic.w	r2, r3, #16
 81021be:	68fb      	ldr	r3, [r7, #12]
 81021c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81021c2:	68fb      	ldr	r3, [r7, #12]
 81021c4:	699b      	ldr	r3, [r3, #24]
 81021c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81021c8:	68fb      	ldr	r3, [r7, #12]
 81021ca:	6a1b      	ldr	r3, [r3, #32]
 81021cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 81021ce:	697b      	ldr	r3, [r7, #20]
 81021d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81021d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	021b      	lsls	r3, r3, #8
 81021da:	697a      	ldr	r2, [r7, #20]
 81021dc:	4313      	orrs	r3, r2
 81021de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81021e0:	697b      	ldr	r3, [r7, #20]
 81021e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81021e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 81021e8:	683b      	ldr	r3, [r7, #0]
 81021ea:	031b      	lsls	r3, r3, #12
 81021ec:	b29b      	uxth	r3, r3
 81021ee:	697a      	ldr	r2, [r7, #20]
 81021f0:	4313      	orrs	r3, r2
 81021f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81021f4:	693b      	ldr	r3, [r7, #16]
 81021f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81021fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 81021fc:	68bb      	ldr	r3, [r7, #8]
 81021fe:	011b      	lsls	r3, r3, #4
 8102200:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8102204:	693a      	ldr	r2, [r7, #16]
 8102206:	4313      	orrs	r3, r2
 8102208:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810220a:	68fb      	ldr	r3, [r7, #12]
 810220c:	697a      	ldr	r2, [r7, #20]
 810220e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102210:	68fb      	ldr	r3, [r7, #12]
 8102212:	693a      	ldr	r2, [r7, #16]
 8102214:	621a      	str	r2, [r3, #32]
}
 8102216:	bf00      	nop
 8102218:	371c      	adds	r7, #28
 810221a:	46bd      	mov	sp, r7
 810221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102220:	4770      	bx	lr

08102222 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8102222:	b480      	push	{r7}
 8102224:	b087      	sub	sp, #28
 8102226:	af00      	add	r7, sp, #0
 8102228:	60f8      	str	r0, [r7, #12]
 810222a:	60b9      	str	r1, [r7, #8]
 810222c:	607a      	str	r2, [r7, #4]
 810222e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8102230:	68fb      	ldr	r3, [r7, #12]
 8102232:	6a1b      	ldr	r3, [r3, #32]
 8102234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102238:	68fb      	ldr	r3, [r7, #12]
 810223a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810223c:	68fb      	ldr	r3, [r7, #12]
 810223e:	69db      	ldr	r3, [r3, #28]
 8102240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8102242:	68fb      	ldr	r3, [r7, #12]
 8102244:	6a1b      	ldr	r3, [r3, #32]
 8102246:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8102248:	697b      	ldr	r3, [r7, #20]
 810224a:	f023 0303 	bic.w	r3, r3, #3
 810224e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8102250:	697a      	ldr	r2, [r7, #20]
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	4313      	orrs	r3, r2
 8102256:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8102258:	697b      	ldr	r3, [r7, #20]
 810225a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810225e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8102260:	683b      	ldr	r3, [r7, #0]
 8102262:	011b      	lsls	r3, r3, #4
 8102264:	b2db      	uxtb	r3, r3
 8102266:	697a      	ldr	r2, [r7, #20]
 8102268:	4313      	orrs	r3, r2
 810226a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810226c:	693b      	ldr	r3, [r7, #16]
 810226e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8102272:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8102274:	68bb      	ldr	r3, [r7, #8]
 8102276:	021b      	lsls	r3, r3, #8
 8102278:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 810227c:	693a      	ldr	r2, [r7, #16]
 810227e:	4313      	orrs	r3, r2
 8102280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8102282:	68fb      	ldr	r3, [r7, #12]
 8102284:	697a      	ldr	r2, [r7, #20]
 8102286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8102288:	68fb      	ldr	r3, [r7, #12]
 810228a:	693a      	ldr	r2, [r7, #16]
 810228c:	621a      	str	r2, [r3, #32]
}
 810228e:	bf00      	nop
 8102290:	371c      	adds	r7, #28
 8102292:	46bd      	mov	sp, r7
 8102294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102298:	4770      	bx	lr

0810229a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810229a:	b480      	push	{r7}
 810229c:	b087      	sub	sp, #28
 810229e:	af00      	add	r7, sp, #0
 81022a0:	60f8      	str	r0, [r7, #12]
 81022a2:	60b9      	str	r1, [r7, #8]
 81022a4:	607a      	str	r2, [r7, #4]
 81022a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81022a8:	68fb      	ldr	r3, [r7, #12]
 81022aa:	6a1b      	ldr	r3, [r3, #32]
 81022ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81022b0:	68fb      	ldr	r3, [r7, #12]
 81022b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81022b4:	68fb      	ldr	r3, [r7, #12]
 81022b6:	69db      	ldr	r3, [r3, #28]
 81022b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81022ba:	68fb      	ldr	r3, [r7, #12]
 81022bc:	6a1b      	ldr	r3, [r3, #32]
 81022be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 81022c0:	697b      	ldr	r3, [r7, #20]
 81022c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81022c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	021b      	lsls	r3, r3, #8
 81022cc:	697a      	ldr	r2, [r7, #20]
 81022ce:	4313      	orrs	r3, r2
 81022d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 81022d2:	697b      	ldr	r3, [r7, #20]
 81022d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81022d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 81022da:	683b      	ldr	r3, [r7, #0]
 81022dc:	031b      	lsls	r3, r3, #12
 81022de:	b29b      	uxth	r3, r3
 81022e0:	697a      	ldr	r2, [r7, #20]
 81022e2:	4313      	orrs	r3, r2
 81022e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 81022e6:	693b      	ldr	r3, [r7, #16]
 81022e8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 81022ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 81022ee:	68bb      	ldr	r3, [r7, #8]
 81022f0:	031b      	lsls	r3, r3, #12
 81022f2:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 81022f6:	693a      	ldr	r2, [r7, #16]
 81022f8:	4313      	orrs	r3, r2
 81022fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81022fc:	68fb      	ldr	r3, [r7, #12]
 81022fe:	697a      	ldr	r2, [r7, #20]
 8102300:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8102302:	68fb      	ldr	r3, [r7, #12]
 8102304:	693a      	ldr	r2, [r7, #16]
 8102306:	621a      	str	r2, [r3, #32]
}
 8102308:	bf00      	nop
 810230a:	371c      	adds	r7, #28
 810230c:	46bd      	mov	sp, r7
 810230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102312:	4770      	bx	lr

08102314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8102314:	b480      	push	{r7}
 8102316:	b087      	sub	sp, #28
 8102318:	af00      	add	r7, sp, #0
 810231a:	60f8      	str	r0, [r7, #12]
 810231c:	60b9      	str	r1, [r7, #8]
 810231e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8102320:	68bb      	ldr	r3, [r7, #8]
 8102322:	f003 031f 	and.w	r3, r3, #31
 8102326:	2201      	movs	r2, #1
 8102328:	fa02 f303 	lsl.w	r3, r2, r3
 810232c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810232e:	68fb      	ldr	r3, [r7, #12]
 8102330:	6a1a      	ldr	r2, [r3, #32]
 8102332:	697b      	ldr	r3, [r7, #20]
 8102334:	43db      	mvns	r3, r3
 8102336:	401a      	ands	r2, r3
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 810233c:	68fb      	ldr	r3, [r7, #12]
 810233e:	6a1a      	ldr	r2, [r3, #32]
 8102340:	68bb      	ldr	r3, [r7, #8]
 8102342:	f003 031f 	and.w	r3, r3, #31
 8102346:	6879      	ldr	r1, [r7, #4]
 8102348:	fa01 f303 	lsl.w	r3, r1, r3
 810234c:	431a      	orrs	r2, r3
 810234e:	68fb      	ldr	r3, [r7, #12]
 8102350:	621a      	str	r2, [r3, #32]
}
 8102352:	bf00      	nop
 8102354:	371c      	adds	r7, #28
 8102356:	46bd      	mov	sp, r7
 8102358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810235c:	4770      	bx	lr

0810235e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810235e:	b480      	push	{r7}
 8102360:	b083      	sub	sp, #12
 8102362:	af00      	add	r7, sp, #0
 8102364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8102366:	bf00      	nop
 8102368:	370c      	adds	r7, #12
 810236a:	46bd      	mov	sp, r7
 810236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102370:	4770      	bx	lr

08102372 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8102372:	b480      	push	{r7}
 8102374:	b083      	sub	sp, #12
 8102376:	af00      	add	r7, sp, #0
 8102378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810237a:	bf00      	nop
 810237c:	370c      	adds	r7, #12
 810237e:	46bd      	mov	sp, r7
 8102380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102384:	4770      	bx	lr

08102386 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8102386:	b480      	push	{r7}
 8102388:	b083      	sub	sp, #12
 810238a:	af00      	add	r7, sp, #0
 810238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810238e:	bf00      	nop
 8102390:	370c      	adds	r7, #12
 8102392:	46bd      	mov	sp, r7
 8102394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102398:	4770      	bx	lr
	...

0810239c <__libc_init_array>:
 810239c:	b570      	push	{r4, r5, r6, lr}
 810239e:	4d0d      	ldr	r5, [pc, #52]	; (81023d4 <__libc_init_array+0x38>)
 81023a0:	4c0d      	ldr	r4, [pc, #52]	; (81023d8 <__libc_init_array+0x3c>)
 81023a2:	1b64      	subs	r4, r4, r5
 81023a4:	10a4      	asrs	r4, r4, #2
 81023a6:	2600      	movs	r6, #0
 81023a8:	42a6      	cmp	r6, r4
 81023aa:	d109      	bne.n	81023c0 <__libc_init_array+0x24>
 81023ac:	4d0b      	ldr	r5, [pc, #44]	; (81023dc <__libc_init_array+0x40>)
 81023ae:	4c0c      	ldr	r4, [pc, #48]	; (81023e0 <__libc_init_array+0x44>)
 81023b0:	f000 f818 	bl	81023e4 <_init>
 81023b4:	1b64      	subs	r4, r4, r5
 81023b6:	10a4      	asrs	r4, r4, #2
 81023b8:	2600      	movs	r6, #0
 81023ba:	42a6      	cmp	r6, r4
 81023bc:	d105      	bne.n	81023ca <__libc_init_array+0x2e>
 81023be:	bd70      	pop	{r4, r5, r6, pc}
 81023c0:	f855 3b04 	ldr.w	r3, [r5], #4
 81023c4:	4798      	blx	r3
 81023c6:	3601      	adds	r6, #1
 81023c8:	e7ee      	b.n	81023a8 <__libc_init_array+0xc>
 81023ca:	f855 3b04 	ldr.w	r3, [r5], #4
 81023ce:	4798      	blx	r3
 81023d0:	3601      	adds	r6, #1
 81023d2:	e7f2      	b.n	81023ba <__libc_init_array+0x1e>
 81023d4:	0810240c 	.word	0x0810240c
 81023d8:	0810240c 	.word	0x0810240c
 81023dc:	0810240c 	.word	0x0810240c
 81023e0:	08102410 	.word	0x08102410

081023e4 <_init>:
 81023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81023e6:	bf00      	nop
 81023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81023ea:	bc08      	pop	{r3}
 81023ec:	469e      	mov	lr, r3
 81023ee:	4770      	bx	lr

081023f0 <_fini>:
 81023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81023f2:	bf00      	nop
 81023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81023f6:	bc08      	pop	{r3}
 81023f8:	469e      	mov	lr, r3
 81023fa:	4770      	bx	lr
